{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8","program":"/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hashbrown","/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=1f138f4cb4474cb7","-C","extra-filename=-1f138f4cb4474cb7","--out-dir","/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","-L","dependency=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","--extern","byteorder=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libbyteorder-7782dad18a732524.rmeta","--extern","scopeguard=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libscopeguard-2ed4da368aaf70ba.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu"],"output":"/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libhashbrown-1f138f4cb4474cb7.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[3708230300808997113,12654405709072133727]},"crate_root":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src","external_crates":[{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":4,"id":{"name":"byteorder","disambiguator":[3030611283665419743,10240428279951967628]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":6,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":10,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":12,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":13,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":14,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","num":16,"id":{"name":"scopeguard","disambiguator":[14630443385895811381,7881502728865196749]}}],"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":0,"byte_end":2567,"line_start":1,"line_end":92,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1356,"byte_end":1357,"line_start":54,"line_end":54,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1286}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1356,"byte_end":1357,"line_start":54,"line_end":54,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1288}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2187,"byte_end":2194,"line_start":81,"line_end":81,"column_start":14,"column_end":21},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2209,"byte_end":2216,"line_start":82,"line_end":82,"column_start":14,"column_end":21},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":0,"byte_end":2567,"line_start":1,"line_end":92,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":35},{"krate":0,"index":666},{"krate":0,"index":949},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1323},{"krate":0,"index":1336},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1328}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"! This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! and `HashSet` types.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The original C++ version of SwissTable can be found [here], and this","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":186,"byte_end":258,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"! [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":259,"byte_end":322,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":323,"byte_end":326,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":327,"byte_end":388,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":389,"byte_end":488,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"! [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":489,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":553,"byte_end":563,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":778,"byte_end":800,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":18},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":2956,"byte_end":2969,"line_start":11,"line_end":11,"column_start":10,"column_end":23},"name":"FxHashBuilder","qualname":"::fx::FxHashBuilder","value":"BuildHasherDefault<FxHasher>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for a `HashBuilder` using the `fx` hash algorithm.\n","sig":null,"attributes":[{"value":"/ Type alias for a `HashBuilder` using the `fx` hash algorithm.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":2881,"byte_end":2946,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":19},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3721,"byte_end":3729,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"FxHasher","qualname":"::fx::FxHasher","value":"FxHasher {  }","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" A speedy hash algorithm for use within rustc. The hashmap in liballoc\n by default uses SipHash which isn't quite as speedy as we want. In the\n compiler we're not really worried about DOS attempts, so we use a fast\n non-cryptographic hash.","sig":null,"attributes":[{"value":"/ A speedy hash algorithm for use within rustc. The hashmap in liballoc","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3003,"byte_end":3076,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ by default uses SipHash which isn't quite as speedy as we want. In the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3077,"byte_end":3151,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ compiler we're not really worried about DOS attempts, so we use a fast","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3152,"byte_end":3226,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ non-cryptographic hash.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3227,"byte_end":3254,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3255,"byte_end":3258,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This is the same as the algorithm used by Firefox -- which is a homespun","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3259,"byte_end":3335,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ one not based on any widely-known algorithm -- though modified to produce","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3336,"byte_end":3413,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ 64-bit hash values instead of 32-bit hash values. It consistently","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3414,"byte_end":3483,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ out-performs an FNV-based hash within rustc itself -- the collision rate is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3484,"byte_end":3563,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ similar or slightly worse than FNV, but the speed of the hash function","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3564,"byte_end":3638,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ itself is much higher because it works on up to 8 bytes at a time.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3639,"byte_end":3709,"line_start":23,"line_end":23,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1292},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12660,"byte_end":12667,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6371,"byte_end":6437,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6438,"byte_end":6441,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently `fx`, though this is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6442,"byte_end":6509,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6510,"byte_end":6586,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6587,"byte_end":6666,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6667,"byte_end":6703,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6704,"byte_end":6707,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6708,"byte_end":6784,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6785,"byte_end":6865,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6866,"byte_end":6947,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6948,"byte_end":6951,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":6952,"byte_end":7035,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7036,"byte_end":7114,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7115,"byte_end":7186,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7187,"byte_end":7206,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7207,"byte_end":7210,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7211,"byte_end":7222,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7223,"byte_end":7259,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7260,"byte_end":7267,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7268,"byte_end":7271,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7272,"byte_end":7342,"line_start":35,"line_end":35,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7343,"byte_end":7346,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7347,"byte_end":7424,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7425,"byte_end":7505,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7506,"byte_end":7581,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7582,"byte_end":7660,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7661,"byte_end":7664,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7665,"byte_end":7744,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7745,"byte_end":7823,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7824,"byte_end":7904,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7905,"byte_end":7950,"line_start":45,"line_end":45,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7951,"byte_end":7954,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7955,"byte_end":7969,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7970,"byte_end":7973,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7974,"byte_end":7981,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":7982,"byte_end":8009,"line_start":50,"line_end":50,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8010,"byte_end":8013,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8014,"byte_end":8082,"line_start":52,"line_end":52,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8083,"byte_end":8142,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8143,"byte_end":8185,"line_start":54,"line_end":54,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8186,"byte_end":8189,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8190,"byte_end":8215,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8216,"byte_end":8240,"line_start":57,"line_end":57,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8241,"byte_end":8294,"line_start":58,"line_end":58,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8295,"byte_end":8335,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8336,"byte_end":8342,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8343,"byte_end":8367,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8368,"byte_end":8410,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8411,"byte_end":8446,"line_start":63,"line_end":63,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8447,"byte_end":8453,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8454,"byte_end":8478,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8479,"byte_end":8521,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8522,"byte_end":8560,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8561,"byte_end":8567,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8568,"byte_end":8592,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8593,"byte_end":8649,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8650,"byte_end":8691,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8692,"byte_end":8698,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8699,"byte_end":8702,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8703,"byte_end":8735,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8736,"byte_end":8806,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8807,"byte_end":8846,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8847,"byte_end":8901,"line_start":77,"line_end":77,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8902,"byte_end":8974,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":8975,"byte_end":9012,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9013,"byte_end":9018,"line_start":80,"line_end":80,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9019,"byte_end":9022,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9023,"byte_end":9096,"line_start":82,"line_end":82,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9097,"byte_end":9158,"line_start":83,"line_end":83,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9159,"byte_end":9162,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9163,"byte_end":9215,"line_start":85,"line_end":85,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9216,"byte_end":9293,"line_start":86,"line_end":86,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9294,"byte_end":9321,"line_start":87,"line_end":87,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9322,"byte_end":9360,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9361,"byte_end":9422,"line_start":89,"line_end":89,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9423,"byte_end":9478,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9479,"byte_end":9488,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9489,"byte_end":9494,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9495,"byte_end":9498,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9499,"byte_end":9571,"line_start":94,"line_end":94,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9572,"byte_end":9645,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9646,"byte_end":9649,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9650,"byte_end":9681,"line_start":97,"line_end":97,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9682,"byte_end":9723,"line_start":98,"line_end":98,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9724,"byte_end":9769,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9770,"byte_end":9775,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9776,"byte_end":9783,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9784,"byte_end":9787,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9788,"byte_end":9863,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9864,"byte_end":9944,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9945,"byte_end":9962,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9963,"byte_end":9966,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9967,"byte_end":9974,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":9975,"byte_end":10002,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10003,"byte_end":10006,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10007,"byte_end":10075,"line_start":110,"line_end":110,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10076,"byte_end":10129,"line_start":111,"line_end":111,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10130,"byte_end":10172,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10173,"byte_end":10176,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10177,"byte_end":10210,"line_start":114,"line_end":114,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10211,"byte_end":10286,"line_start":115,"line_end":115,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10287,"byte_end":10322,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10323,"byte_end":10333,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10334,"byte_end":10339,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10340,"byte_end":10343,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10344,"byte_end":10396,"line_start":120,"line_end":120,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10397,"byte_end":10445,"line_start":121,"line_end":121,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10446,"byte_end":10449,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10450,"byte_end":10523,"line_start":123,"line_end":123,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10524,"byte_end":10552,"line_start":124,"line_end":124,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10553,"byte_end":10620,"line_start":125,"line_end":125,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10621,"byte_end":10624,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10625,"byte_end":10693,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10694,"byte_end":10753,"line_start":128,"line_end":128,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10754,"byte_end":10786,"line_start":129,"line_end":129,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10787,"byte_end":10794,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10795,"byte_end":10798,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10799,"byte_end":10892,"line_start":132,"line_end":132,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10893,"byte_end":10931,"line_start":133,"line_end":133,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10932,"byte_end":10935,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10936,"byte_end":10995,"line_start":135,"line_end":135,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":10996,"byte_end":11060,"line_start":136,"line_end":136,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11061,"byte_end":11134,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11135,"byte_end":11206,"line_start":138,"line_end":138,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11207,"byte_end":11272,"line_start":139,"line_end":139,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11273,"byte_end":11305,"line_start":140,"line_end":140,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11306,"byte_end":11346,"line_start":141,"line_end":141,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11347,"byte_end":11413,"line_start":142,"line_end":142,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11414,"byte_end":11455,"line_start":143,"line_end":143,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11456,"byte_end":11459,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11460,"byte_end":11467,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11468,"byte_end":11495,"line_start":146,"line_end":146,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11496,"byte_end":11499,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11500,"byte_end":11541,"line_start":148,"line_end":148,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11542,"byte_end":11561,"line_start":149,"line_end":149,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11562,"byte_end":11583,"line_start":150,"line_end":150,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11584,"byte_end":11608,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11609,"byte_end":11614,"line_start":152,"line_end":152,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11615,"byte_end":11618,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11619,"byte_end":11636,"line_start":154,"line_end":154,"column_start":1,"column_end":18}},{"value":"/     /// Create a new Viking.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11637,"byte_end":11669,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11670,"byte_end":11723,"line_start":156,"line_end":156,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11724,"byte_end":11799,"line_start":157,"line_end":157,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11800,"byte_end":11809,"line_start":158,"line_end":158,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11810,"byte_end":11815,"line_start":159,"line_end":159,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11816,"byte_end":11819,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11820,"byte_end":11877,"line_start":161,"line_end":161,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11878,"byte_end":11915,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11916,"byte_end":11919,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11920,"byte_end":11975,"line_start":164,"line_end":164,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":11976,"byte_end":12031,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12032,"byte_end":12089,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12090,"byte_end":12093,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12094,"byte_end":12163,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12164,"byte_end":12202,"line_start":169,"line_end":169,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12203,"byte_end":12254,"line_start":170,"line_end":170,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12255,"byte_end":12260,"line_start":171,"line_end":171,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12261,"byte_end":12268,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12269,"byte_end":12272,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12273,"byte_end":12350,"line_start":174,"line_end":174,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12351,"byte_end":12354,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12355,"byte_end":12362,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12363,"byte_end":12390,"line_start":177,"line_end":177,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12391,"byte_end":12394,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12395,"byte_end":12410,"line_start":179,"line_end":179,"column_start":1,"column_end":16}},{"value":"/     let timber_resources: HashMap<&str, i32> =","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12411,"byte_end":12461,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/     [(\"Norway\", 100),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12462,"byte_end":12487,"line_start":181,"line_end":181,"column_start":1,"column_end":26}},{"value":"/      (\"Denmark\", 50),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12488,"byte_end":12513,"line_start":182,"line_end":182,"column_start":1,"column_end":26}},{"value":"/      (\"Iceland\", 10)]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12514,"byte_end":12539,"line_start":183,"line_end":183,"column_start":1,"column_end":26}},{"value":"/      .iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12540,"byte_end":12576,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/     // use the values stored in map","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12577,"byte_end":12616,"line_start":185,"line_end":185,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12617,"byte_end":12622,"line_start":186,"line_end":186,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12623,"byte_end":12630,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13358,"byte_end":13361,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"pub fn new() -> HashMap<K, V, DefaultHashBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13015,"byte_end":13046,"line_start":203,"line_end":203,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13051,"byte_end":13054,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13059,"byte_end":13151,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13156,"byte_end":13183,"line_start":206,"line_end":206,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13188,"byte_end":13191,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13196,"byte_end":13210,"line_start":208,"line_end":208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13215,"byte_end":13218,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13223,"byte_end":13230,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13235,"byte_end":13262,"line_start":211,"line_end":211,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13267,"byte_end":13320,"line_start":212,"line_end":212,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13325,"byte_end":13332,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13337,"byte_end":13346,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13848,"byte_end":13861,"line_start":231,"line_end":231,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> HashMap<K, V, DefaultHashBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13441,"byte_end":13500,"line_start":219,"line_end":219,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13505,"byte_end":13508,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13513,"byte_end":13587,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13592,"byte_end":13661,"line_start":222,"line_end":222,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13666,"byte_end":13669,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13674,"byte_end":13688,"line_start":224,"line_end":224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13693,"byte_end":13696,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13701,"byte_end":13708,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13713,"byte_end":13740,"line_start":227,"line_end":227,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13745,"byte_end":13810,"line_start":228,"line_end":228,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13815,"byte_end":13822,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":13827,"byte_end":13836,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14817,"byte_end":14828,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> HashMap<K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14080,"byte_end":14156,"line_start":241,"line_end":241,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14161,"byte_end":14170,"line_start":242,"line_end":242,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14175,"byte_end":14178,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14183,"byte_end":14236,"line_start":244,"line_end":244,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14241,"byte_end":14244,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14249,"byte_end":14312,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14317,"byte_end":14382,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14387,"byte_end":14450,"line_start":248,"line_end":248,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14455,"byte_end":14519,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14524,"byte_end":14527,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14532,"byte_end":14546,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14551,"byte_end":14554,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14559,"byte_end":14566,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14571,"byte_end":14598,"line_start":254,"line_end":254,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14603,"byte_end":14651,"line_start":255,"line_end":255,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14656,"byte_end":14659,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14664,"byte_end":14706,"line_start":257,"line_end":257,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14711,"byte_end":14753,"line_start":258,"line_end":258,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14758,"byte_end":14779,"line_start":259,"line_end":259,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14784,"byte_end":14791,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14796,"byte_end":14805,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15834,"byte_end":15858,"line_start":291,"line_end":291,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> HashMap<K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14969,"byte_end":15049,"line_start":269,"line_end":269,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15054,"byte_end":15075,"line_start":270,"line_end":270,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15080,"byte_end":15083,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15088,"byte_end":15162,"line_start":272,"line_end":272,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15167,"byte_end":15236,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15241,"byte_end":15244,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15249,"byte_end":15312,"line_start":275,"line_end":275,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15317,"byte_end":15382,"line_start":276,"line_end":276,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15387,"byte_end":15450,"line_start":277,"line_end":277,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15455,"byte_end":15519,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15524,"byte_end":15527,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15532,"byte_end":15546,"line_start":280,"line_end":280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15551,"byte_end":15554,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15559,"byte_end":15566,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15571,"byte_end":15598,"line_start":283,"line_end":283,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15603,"byte_end":15651,"line_start":284,"line_end":284,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15656,"byte_end":15659,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15664,"byte_end":15706,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15711,"byte_end":15770,"line_start":287,"line_end":287,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15775,"byte_end":15796,"line_start":288,"line_end":288,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15801,"byte_end":15808,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":15813,"byte_end":15822,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16531,"byte_end":16537,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16034,"byte_end":16087,"line_start":298,"line_end":298,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16092,"byte_end":16095,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16100,"byte_end":16178,"line_start":300,"line_end":300,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16183,"byte_end":16186,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16191,"byte_end":16205,"line_start":302,"line_end":302,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16210,"byte_end":16213,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16218,"byte_end":16225,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16230,"byte_end":16257,"line_start":305,"line_end":305,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16262,"byte_end":16310,"line_start":306,"line_end":306,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16315,"byte_end":16318,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16323,"byte_end":16370,"line_start":308,"line_end":308,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16375,"byte_end":16437,"line_start":309,"line_end":309,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16442,"byte_end":16493,"line_start":310,"line_end":310,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16498,"byte_end":16505,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16510,"byte_end":16519,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17046,"byte_end":17054,"line_start":330,"line_end":330,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16591,"byte_end":16664,"line_start":317,"line_end":317,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16669,"byte_end":16672,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16677,"byte_end":16752,"line_start":319,"line_end":319,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16757,"byte_end":16823,"line_start":320,"line_end":320,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16828,"byte_end":16831,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16836,"byte_end":16850,"line_start":322,"line_end":322,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16855,"byte_end":16858,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16863,"byte_end":16870,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16875,"byte_end":16902,"line_start":325,"line_end":325,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16907,"byte_end":16968,"line_start":326,"line_end":326,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":16973,"byte_end":17008,"line_start":327,"line_end":327,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17013,"byte_end":17020,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17025,"byte_end":17034,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17669,"byte_end":17676,"line_start":352,"line_end":352,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17114,"byte_end":17190,"line_start":334,"line_end":334,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17195,"byte_end":17263,"line_start":335,"line_end":335,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17268,"byte_end":17295,"line_start":336,"line_end":336,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17300,"byte_end":17303,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17308,"byte_end":17320,"line_start":338,"line_end":338,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17325,"byte_end":17328,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17333,"byte_end":17391,"line_start":340,"line_end":340,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17396,"byte_end":17399,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17404,"byte_end":17469,"line_start":342,"line_end":342,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17474,"byte_end":17477,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17482,"byte_end":17496,"line_start":344,"line_end":344,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17501,"byte_end":17504,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17509,"byte_end":17516,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17521,"byte_end":17548,"line_start":347,"line_end":347,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17553,"byte_end":17606,"line_start":348,"line_end":348,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17611,"byte_end":17631,"line_start":349,"line_end":349,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17636,"byte_end":17643,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17648,"byte_end":17657,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18454,"byte_end":18465,"line_start":375,"line_end":375,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17855,"byte_end":17939,"line_start":358,"line_end":358,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":17944,"byte_end":18023,"line_start":359,"line_end":359,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18028,"byte_end":18055,"line_start":360,"line_end":360,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18060,"byte_end":18063,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18068,"byte_end":18080,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18085,"byte_end":18088,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18093,"byte_end":18173,"line_start":364,"line_end":364,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18178,"byte_end":18194,"line_start":365,"line_end":365,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18199,"byte_end":18202,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18207,"byte_end":18221,"line_start":367,"line_end":367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18226,"byte_end":18229,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18234,"byte_end":18241,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18246,"byte_end":18273,"line_start":370,"line_end":370,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18278,"byte_end":18333,"line_start":371,"line_end":371,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18338,"byte_end":18416,"line_start":372,"line_end":372,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18421,"byte_end":18428,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18433,"byte_end":18442,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19252,"byte_end":19265,"line_start":398,"line_end":398,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18681,"byte_end":18750,"line_start":381,"line_end":381,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18755,"byte_end":18820,"line_start":382,"line_end":382,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18825,"byte_end":18898,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18903,"byte_end":18906,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18911,"byte_end":18925,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18930,"byte_end":18933,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18938,"byte_end":18945,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18950,"byte_end":18977,"line_start":388,"line_end":388,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18982,"byte_end":18985,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":18990,"byte_end":19055,"line_start":390,"line_end":390,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19060,"byte_end":19081,"line_start":391,"line_end":391,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19086,"byte_end":19107,"line_start":392,"line_end":392,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19112,"byte_end":19147,"line_start":393,"line_end":393,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19152,"byte_end":19176,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19181,"byte_end":19214,"line_start":395,"line_end":395,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19219,"byte_end":19226,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19231,"byte_end":19240,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20153,"byte_end":20162,"line_start":425,"line_end":425,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19405,"byte_end":19473,"line_start":403,"line_end":403,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19478,"byte_end":19556,"line_start":404,"line_end":404,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19561,"byte_end":19634,"line_start":405,"line_end":405,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19639,"byte_end":19642,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19647,"byte_end":19710,"line_start":407,"line_end":407,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19715,"byte_end":19736,"line_start":408,"line_end":408,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19741,"byte_end":19744,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19749,"byte_end":19763,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19768,"byte_end":19771,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19776,"byte_end":19783,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19788,"byte_end":19815,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19820,"byte_end":19823,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19828,"byte_end":19893,"line_start":415,"line_end":415,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19898,"byte_end":19919,"line_start":416,"line_end":416,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19924,"byte_end":19945,"line_start":417,"line_end":417,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19950,"byte_end":19985,"line_start":418,"line_end":418,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":19990,"byte_end":20012,"line_start":419,"line_end":419,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20017,"byte_end":20051,"line_start":420,"line_end":420,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20056,"byte_end":20077,"line_start":421,"line_end":421,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20082,"byte_end":20115,"line_start":422,"line_end":422,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20120,"byte_end":20127,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20132,"byte_end":20141,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20901,"byte_end":20905,"line_start":454,"line_end":454,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20472,"byte_end":20525,"line_start":436,"line_end":436,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20530,"byte_end":20571,"line_start":437,"line_end":437,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20576,"byte_end":20579,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20584,"byte_end":20598,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20603,"byte_end":20606,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20611,"byte_end":20618,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20623,"byte_end":20650,"line_start":442,"line_end":442,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20655,"byte_end":20658,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20663,"byte_end":20696,"line_start":444,"line_end":444,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20701,"byte_end":20724,"line_start":445,"line_end":445,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20729,"byte_end":20752,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20757,"byte_end":20780,"line_start":447,"line_end":447,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20785,"byte_end":20788,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20793,"byte_end":20820,"line_start":449,"line_end":449,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20825,"byte_end":20853,"line_start":450,"line_end":450,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20858,"byte_end":20863,"line_start":451,"line_end":451,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20868,"byte_end":20875,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20880,"byte_end":20889,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21409,"byte_end":21415,"line_start":476,"line_end":476,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":20976,"byte_end":21031,"line_start":458,"line_end":458,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21036,"byte_end":21077,"line_start":459,"line_end":459,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21082,"byte_end":21085,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21090,"byte_end":21104,"line_start":461,"line_end":461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21109,"byte_end":21112,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21117,"byte_end":21124,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21129,"byte_end":21156,"line_start":464,"line_end":464,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21161,"byte_end":21164,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21169,"byte_end":21202,"line_start":466,"line_end":466,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21207,"byte_end":21230,"line_start":467,"line_end":467,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21235,"byte_end":21258,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21263,"byte_end":21286,"line_start":469,"line_end":469,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21291,"byte_end":21294,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21299,"byte_end":21328,"line_start":471,"line_end":471,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21333,"byte_end":21361,"line_start":472,"line_end":472,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21366,"byte_end":21371,"line_start":473,"line_end":473,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21376,"byte_end":21383,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21388,"byte_end":21397,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22029,"byte_end":22039,"line_start":503,"line_end":503,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21490,"byte_end":21553,"line_start":480,"line_end":480,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21558,"byte_end":21603,"line_start":481,"line_end":481,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21608,"byte_end":21611,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21616,"byte_end":21630,"line_start":483,"line_end":483,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21635,"byte_end":21638,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21643,"byte_end":21650,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21655,"byte_end":21682,"line_start":486,"line_end":486,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21687,"byte_end":21690,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21695,"byte_end":21728,"line_start":488,"line_end":488,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21733,"byte_end":21736,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21741,"byte_end":21764,"line_start":490,"line_end":490,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21769,"byte_end":21792,"line_start":491,"line_end":491,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21797,"byte_end":21820,"line_start":492,"line_end":492,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21825,"byte_end":21828,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21833,"byte_end":21866,"line_start":494,"line_end":494,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21871,"byte_end":21896,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21901,"byte_end":21906,"line_start":496,"line_end":496,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21911,"byte_end":21914,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21919,"byte_end":21948,"line_start":498,"line_end":498,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21953,"byte_end":21981,"line_start":499,"line_end":499,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21986,"byte_end":21991,"line_start":500,"line_end":500,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":21996,"byte_end":22003,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22008,"byte_end":22017,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22623,"byte_end":22627,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22149,"byte_end":22213,"line_start":509,"line_end":509,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22218,"byte_end":22268,"line_start":510,"line_end":510,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22273,"byte_end":22276,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22281,"byte_end":22295,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22300,"byte_end":22303,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22308,"byte_end":22315,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22320,"byte_end":22347,"line_start":515,"line_end":515,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22352,"byte_end":22355,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22360,"byte_end":22393,"line_start":517,"line_end":517,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22398,"byte_end":22421,"line_start":518,"line_end":518,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22426,"byte_end":22449,"line_start":519,"line_end":519,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22454,"byte_end":22477,"line_start":520,"line_end":520,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22482,"byte_end":22485,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22490,"byte_end":22524,"line_start":522,"line_end":522,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22529,"byte_end":22575,"line_start":523,"line_end":523,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22580,"byte_end":22585,"line_start":524,"line_end":524,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22590,"byte_end":22597,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22602,"byte_end":22611,"line_start":526,"line_end":526,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23489,"byte_end":23497,"line_start":561,"line_end":561,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22859,"byte_end":22923,"line_start":537,"line_end":537,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22928,"byte_end":22970,"line_start":538,"line_end":538,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":22975,"byte_end":23029,"line_start":539,"line_end":539,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23034,"byte_end":23037,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23042,"byte_end":23056,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23061,"byte_end":23064,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23069,"byte_end":23076,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23081,"byte_end":23108,"line_start":544,"line_end":544,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23113,"byte_end":23116,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23121,"byte_end":23154,"line_start":546,"line_end":546,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23159,"byte_end":23182,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23187,"byte_end":23210,"line_start":548,"line_end":548,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23215,"byte_end":23238,"line_start":549,"line_end":549,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23243,"byte_end":23246,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23251,"byte_end":23275,"line_start":551,"line_end":551,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23280,"byte_end":23316,"line_start":552,"line_end":552,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23321,"byte_end":23339,"line_start":553,"line_end":553,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23344,"byte_end":23349,"line_start":554,"line_end":554,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23354,"byte_end":23357,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23362,"byte_end":23390,"line_start":556,"line_end":556,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23395,"byte_end":23441,"line_start":557,"line_end":557,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23446,"byte_end":23451,"line_start":558,"line_end":558,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23456,"byte_end":23463,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23468,"byte_end":23477,"line_start":560,"line_end":560,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24314,"byte_end":24319,"line_start":591,"line_end":591,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23739,"byte_end":23821,"line_start":571,"line_end":571,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23826,"byte_end":23829,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23834,"byte_end":23848,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23853,"byte_end":23856,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23861,"byte_end":23868,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23873,"byte_end":23900,"line_start":576,"line_end":576,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23905,"byte_end":23908,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23913,"byte_end":23950,"line_start":578,"line_end":578,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23955,"byte_end":23958,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":23963,"byte_end":24014,"line_start":580,"line_end":580,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24019,"byte_end":24072,"line_start":581,"line_end":581,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24077,"byte_end":24099,"line_start":582,"line_end":582,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24104,"byte_end":24109,"line_start":583,"line_end":583,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24114,"byte_end":24117,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24122,"byte_end":24155,"line_start":585,"line_end":585,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24160,"byte_end":24193,"line_start":586,"line_end":586,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24198,"byte_end":24231,"line_start":587,"line_end":587,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24236,"byte_end":24276,"line_start":588,"line_end":588,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24281,"byte_end":24288,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24293,"byte_end":24302,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25194,"byte_end":25197,"line_start":627,"line_end":627,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24897,"byte_end":24943,"line_start":614,"line_end":614,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24948,"byte_end":24951,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24956,"byte_end":24970,"line_start":616,"line_end":616,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24975,"byte_end":24978,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24983,"byte_end":24990,"line_start":618,"line_end":618,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":24995,"byte_end":25022,"line_start":619,"line_end":619,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25027,"byte_end":25030,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25035,"byte_end":25066,"line_start":621,"line_end":621,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25071,"byte_end":25098,"line_start":622,"line_end":622,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25103,"byte_end":25124,"line_start":623,"line_end":623,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25129,"byte_end":25156,"line_start":624,"line_end":624,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25161,"byte_end":25168,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25173,"byte_end":25182,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25551,"byte_end":25559,"line_start":644,"line_end":644,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25252,"byte_end":25301,"line_start":631,"line_end":631,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25306,"byte_end":25309,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25314,"byte_end":25328,"line_start":633,"line_end":633,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25333,"byte_end":25336,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25341,"byte_end":25348,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25353,"byte_end":25380,"line_start":636,"line_end":636,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25385,"byte_end":25388,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25393,"byte_end":25424,"line_start":638,"line_end":638,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25429,"byte_end":25455,"line_start":639,"line_end":639,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25460,"byte_end":25481,"line_start":640,"line_end":640,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25486,"byte_end":25513,"line_start":641,"line_end":641,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25518,"byte_end":25525,"line_start":642,"line_end":642,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25530,"byte_end":25539,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26117,"byte_end":26122,"line_start":668,"line_end":668,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25612,"byte_end":25687,"line_start":648,"line_end":648,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25692,"byte_end":25723,"line_start":649,"line_end":649,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25728,"byte_end":25731,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25736,"byte_end":25750,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25755,"byte_end":25758,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25763,"byte_end":25770,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25775,"byte_end":25802,"line_start":654,"line_end":654,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25807,"byte_end":25810,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25815,"byte_end":25846,"line_start":656,"line_end":656,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25851,"byte_end":25872,"line_start":657,"line_end":657,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25877,"byte_end":25898,"line_start":658,"line_end":658,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25903,"byte_end":25906,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25911,"byte_end":25948,"line_start":660,"line_end":660,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25953,"byte_end":25987,"line_start":661,"line_end":661,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":25992,"byte_end":26030,"line_start":662,"line_end":662,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26035,"byte_end":26040,"line_start":663,"line_end":663,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26045,"byte_end":26048,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26053,"byte_end":26079,"line_start":665,"line_end":665,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26084,"byte_end":26091,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26096,"byte_end":26105,"line_start":667,"line_end":667,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26655,"byte_end":26660,"line_start":691,"line_end":691,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26323,"byte_end":26399,"line_start":677,"line_end":677,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26404,"byte_end":26418,"line_start":678,"line_end":678,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26423,"byte_end":26426,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26431,"byte_end":26445,"line_start":680,"line_end":680,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26450,"byte_end":26453,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26458,"byte_end":26465,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26470,"byte_end":26497,"line_start":683,"line_end":683,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26502,"byte_end":26505,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26510,"byte_end":26541,"line_start":685,"line_end":685,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26546,"byte_end":26567,"line_start":686,"line_end":686,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26572,"byte_end":26586,"line_start":687,"line_end":687,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26591,"byte_end":26617,"line_start":688,"line_end":688,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26622,"byte_end":26629,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26634,"byte_end":26643,"line_start":690,"line_end":690,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27361,"byte_end":27364,"line_start":715,"line_end":715,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26713,"byte_end":26775,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26780,"byte_end":26783,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26788,"byte_end":26851,"line_start":697,"line_end":697,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26856,"byte_end":26923,"line_start":698,"line_end":698,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26928,"byte_end":26945,"line_start":699,"line_end":699,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26950,"byte_end":26953,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":26958,"byte_end":27017,"line_start":701,"line_end":701,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27022,"byte_end":27086,"line_start":702,"line_end":702,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27091,"byte_end":27094,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27099,"byte_end":27113,"line_start":704,"line_end":704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27118,"byte_end":27121,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27126,"byte_end":27133,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27138,"byte_end":27165,"line_start":707,"line_end":707,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27170,"byte_end":27173,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27178,"byte_end":27211,"line_start":709,"line_end":709,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27216,"byte_end":27239,"line_start":710,"line_end":710,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27244,"byte_end":27284,"line_start":711,"line_end":711,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27289,"byte_end":27323,"line_start":712,"line_end":712,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27328,"byte_end":27335,"line_start":713,"line_end":713,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27340,"byte_end":27349,"line_start":714,"line_end":714,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28207,"byte_end":28220,"line_start":743,"line_end":743,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27521,"byte_end":27586,"line_start":723,"line_end":723,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27591,"byte_end":27594,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27599,"byte_end":27671,"line_start":725,"line_end":725,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27676,"byte_end":27743,"line_start":726,"line_end":726,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27748,"byte_end":27765,"line_start":727,"line_end":727,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27770,"byte_end":27773,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27778,"byte_end":27837,"line_start":729,"line_end":729,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27842,"byte_end":27906,"line_start":730,"line_end":730,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27911,"byte_end":27914,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27919,"byte_end":27933,"line_start":732,"line_end":732,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27938,"byte_end":27941,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27946,"byte_end":27953,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27958,"byte_end":27985,"line_start":735,"line_end":735,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27990,"byte_end":27993,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":27998,"byte_end":28031,"line_start":737,"line_end":737,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28036,"byte_end":28059,"line_start":738,"line_end":738,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28064,"byte_end":28120,"line_start":739,"line_end":739,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28125,"byte_end":28169,"line_start":740,"line_end":740,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28174,"byte_end":28181,"line_start":741,"line_end":741,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28186,"byte_end":28195,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29259,"byte_end":29271,"line_start":777,"line_end":777,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28593,"byte_end":28660,"line_start":757,"line_end":757,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28665,"byte_end":28668,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28673,"byte_end":28736,"line_start":759,"line_end":759,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28741,"byte_end":28808,"line_start":760,"line_end":760,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28813,"byte_end":28830,"line_start":761,"line_end":761,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28835,"byte_end":28838,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28843,"byte_end":28902,"line_start":763,"line_end":763,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28907,"byte_end":28971,"line_start":764,"line_end":764,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28976,"byte_end":28979,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":28984,"byte_end":28998,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29003,"byte_end":29006,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29011,"byte_end":29018,"line_start":768,"line_end":768,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29023,"byte_end":29050,"line_start":769,"line_end":769,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29055,"byte_end":29058,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29063,"byte_end":29096,"line_start":771,"line_end":771,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29101,"byte_end":29124,"line_start":772,"line_end":772,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29129,"byte_end":29172,"line_start":773,"line_end":773,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29177,"byte_end":29221,"line_start":774,"line_end":774,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29226,"byte_end":29233,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29238,"byte_end":29247,"line_start":776,"line_end":776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30087,"byte_end":30094,"line_start":807,"line_end":807,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29406,"byte_end":29476,"line_start":785,"line_end":785,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29481,"byte_end":29484,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29489,"byte_end":29552,"line_start":787,"line_end":787,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29557,"byte_end":29624,"line_start":788,"line_end":788,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29629,"byte_end":29646,"line_start":789,"line_end":789,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29651,"byte_end":29654,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29659,"byte_end":29718,"line_start":791,"line_end":791,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29723,"byte_end":29787,"line_start":792,"line_end":792,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29792,"byte_end":29795,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29800,"byte_end":29814,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29819,"byte_end":29822,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29827,"byte_end":29834,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29839,"byte_end":29866,"line_start":797,"line_end":797,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29871,"byte_end":29874,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29879,"byte_end":29912,"line_start":799,"line_end":799,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29917,"byte_end":29940,"line_start":800,"line_end":800,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29945,"byte_end":29983,"line_start":801,"line_end":801,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":29988,"byte_end":30005,"line_start":802,"line_end":802,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30010,"byte_end":30015,"line_start":803,"line_end":803,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30020,"byte_end":30049,"line_start":804,"line_end":804,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30054,"byte_end":30061,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30066,"byte_end":30075,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31330,"byte_end":31336,"line_start":844,"line_end":844,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30390,"byte_end":30432,"line_start":818,"line_end":818,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30437,"byte_end":30440,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30445,"byte_end":30512,"line_start":820,"line_end":820,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30517,"byte_end":30520,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30525,"byte_end":30600,"line_start":822,"line_end":822,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30605,"byte_end":30676,"line_start":823,"line_end":823,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30681,"byte_end":30754,"line_start":824,"line_end":824,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30759,"byte_end":30787,"line_start":825,"line_end":825,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30792,"byte_end":30795,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30800,"byte_end":30880,"line_start":827,"line_end":827,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30885,"byte_end":30953,"line_start":828,"line_end":828,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30958,"byte_end":30961,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30966,"byte_end":30980,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30985,"byte_end":30988,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":30993,"byte_end":31000,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31005,"byte_end":31032,"line_start":833,"line_end":833,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31037,"byte_end":31040,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31045,"byte_end":31078,"line_start":835,"line_end":835,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31083,"byte_end":31125,"line_start":836,"line_end":836,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31130,"byte_end":31168,"line_start":837,"line_end":837,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31173,"byte_end":31176,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31181,"byte_end":31205,"line_start":839,"line_end":839,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31210,"byte_end":31257,"line_start":840,"line_end":840,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31262,"byte_end":31292,"line_start":841,"line_end":841,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31297,"byte_end":31304,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31309,"byte_end":31318,"line_start":843,"line_end":843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32518,"byte_end":32524,"line_start":879,"line_end":879,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31819,"byte_end":31892,"line_start":858,"line_end":858,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31897,"byte_end":31927,"line_start":859,"line_end":859,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31932,"byte_end":31935,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":31940,"byte_end":32003,"line_start":861,"line_end":861,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32008,"byte_end":32075,"line_start":862,"line_end":862,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32080,"byte_end":32097,"line_start":863,"line_end":863,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32102,"byte_end":32105,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32110,"byte_end":32169,"line_start":865,"line_end":865,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32174,"byte_end":32238,"line_start":866,"line_end":866,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32243,"byte_end":32246,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32251,"byte_end":32265,"line_start":868,"line_end":868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32270,"byte_end":32273,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32278,"byte_end":32285,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32290,"byte_end":32317,"line_start":871,"line_end":871,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32322,"byte_end":32325,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32330,"byte_end":32363,"line_start":873,"line_end":873,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32368,"byte_end":32391,"line_start":874,"line_end":874,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32396,"byte_end":32438,"line_start":875,"line_end":875,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32443,"byte_end":32480,"line_start":876,"line_end":876,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32485,"byte_end":32492,"line_start":877,"line_end":877,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32497,"byte_end":32506,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33431,"byte_end":33443,"line_start":910,"line_end":910,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32683,"byte_end":32756,"line_start":887,"line_end":887,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32761,"byte_end":32795,"line_start":888,"line_end":888,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32800,"byte_end":32803,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32808,"byte_end":32871,"line_start":890,"line_end":890,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32876,"byte_end":32943,"line_start":891,"line_end":891,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32948,"byte_end":32965,"line_start":892,"line_end":892,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32970,"byte_end":32973,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":32978,"byte_end":33037,"line_start":894,"line_end":894,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33042,"byte_end":33106,"line_start":895,"line_end":895,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33111,"byte_end":33114,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33119,"byte_end":33133,"line_start":897,"line_end":897,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33138,"byte_end":33141,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33146,"byte_end":33153,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33158,"byte_end":33185,"line_start":900,"line_end":900,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33190,"byte_end":33193,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33198,"byte_end":33215,"line_start":902,"line_end":902,"column_start":5,"column_end":22}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33220,"byte_end":33253,"line_start":903,"line_end":903,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33258,"byte_end":33281,"line_start":904,"line_end":904,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33286,"byte_end":33339,"line_start":905,"line_end":905,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33344,"byte_end":33381,"line_start":906,"line_end":906,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33386,"byte_end":33393,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33398,"byte_end":33405,"line_start":908,"line_end":908,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33410,"byte_end":33419,"line_start":909,"line_end":909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34285,"byte_end":34291,"line_start":939,"line_end":939,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33866,"byte_end":33923,"line_start":926,"line_end":926,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33928,"byte_end":33931,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":33936,"byte_end":34023,"line_start":928,"line_end":928,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34028,"byte_end":34031,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34036,"byte_end":34050,"line_start":930,"line_end":930,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34055,"byte_end":34058,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34063,"byte_end":34070,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34075,"byte_end":34102,"line_start":933,"line_end":933,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34107,"byte_end":34110,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34115,"byte_end":34187,"line_start":935,"line_end":935,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34192,"byte_end":34227,"line_start":936,"line_end":936,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34232,"byte_end":34261,"line_start":937,"line_end":937,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34266,"byte_end":34273,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36820,"byte_end":36833,"line_start":994,"line_end":994,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34915,"byte_end":34963,"line_start":962,"line_end":962,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34968,"byte_end":34971,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34976,"byte_end":35045,"line_start":964,"line_end":964,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35050,"byte_end":35123,"line_start":965,"line_end":965,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35128,"byte_end":35198,"line_start":966,"line_end":966,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35203,"byte_end":35249,"line_start":967,"line_end":967,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35254,"byte_end":35257,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35262,"byte_end":35319,"line_start":969,"line_end":969,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35324,"byte_end":35327,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35332,"byte_end":35354,"line_start":971,"line_end":971,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35359,"byte_end":35436,"line_start":972,"line_end":972,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35441,"byte_end":35505,"line_start":973,"line_end":973,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35510,"byte_end":35570,"line_start":974,"line_end":974,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35575,"byte_end":35578,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35583,"byte_end":35660,"line_start":976,"line_end":976,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35665,"byte_end":35740,"line_start":977,"line_end":977,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35745,"byte_end":35821,"line_start":978,"line_end":978,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35826,"byte_end":35897,"line_start":979,"line_end":979,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35902,"byte_end":35905,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35910,"byte_end":35985,"line_start":981,"line_end":981,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":35990,"byte_end":36069,"line_start":982,"line_end":982,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36074,"byte_end":36149,"line_start":983,"line_end":983,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36154,"byte_end":36216,"line_start":984,"line_end":984,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36221,"byte_end":36224,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36229,"byte_end":36299,"line_start":986,"line_end":986,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36304,"byte_end":36384,"line_start":987,"line_end":987,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36389,"byte_end":36461,"line_start":988,"line_end":988,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36466,"byte_end":36542,"line_start":989,"line_end":989,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36547,"byte_end":36622,"line_start":990,"line_end":990,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36627,"byte_end":36709,"line_start":991,"line_end":991,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36714,"byte_end":36794,"line_start":992,"line_end":992,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36799,"byte_end":36808,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37657,"byte_end":37666,"line_start":1015,"line_end":1015,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":36955,"byte_end":37013,"line_start":999,"line_end":999,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37018,"byte_end":37021,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37026,"byte_end":37095,"line_start":1001,"line_end":1001,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37100,"byte_end":37173,"line_start":1002,"line_end":1002,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37178,"byte_end":37205,"line_start":1003,"line_end":1003,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37210,"byte_end":37213,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37218,"byte_end":37240,"line_start":1005,"line_end":1005,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37245,"byte_end":37267,"line_start":1006,"line_end":1006,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37272,"byte_end":37336,"line_start":1007,"line_end":1007,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37341,"byte_end":37401,"line_start":1008,"line_end":1008,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37406,"byte_end":37409,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37414,"byte_end":37495,"line_start":1010,"line_end":1010,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37500,"byte_end":37530,"line_start":1011,"line_end":1011,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37535,"byte_end":37538,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37543,"byte_end":37631,"line_start":1013,"line_end":1013,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37636,"byte_end":37645,"line_start":1014,"line_end":1014,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":153},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39420,"byte_end":39424,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39165,"byte_end":39213,"line_start":1086,"line_end":1086,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39214,"byte_end":39217,"line_start":1087,"line_end":1087,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39218,"byte_end":39293,"line_start":1088,"line_end":1088,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39294,"byte_end":39321,"line_start":1089,"line_end":1089,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39322,"byte_end":39325,"line_start":1090,"line_end":1090,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39326,"byte_end":39371,"line_start":1091,"line_end":1091,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39372,"byte_end":39408,"line_start":1092,"line_end":1092,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":169},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40236,"byte_end":40243,"line_start":1122,"line_end":1122,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39962,"byte_end":40017,"line_start":1115,"line_end":1115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40018,"byte_end":40021,"line_start":1116,"line_end":1116,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40022,"byte_end":40101,"line_start":1117,"line_end":1117,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40102,"byte_end":40129,"line_start":1118,"line_end":1118,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40130,"byte_end":40133,"line_start":1119,"line_end":1119,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40134,"byte_end":40187,"line_start":1120,"line_end":1120,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40188,"byte_end":40224,"line_start":1121,"line_end":1121,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":180},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40974,"byte_end":40982,"line_start":1146,"line_end":1146,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":183}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40647,"byte_end":40702,"line_start":1139,"line_end":1139,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40703,"byte_end":40706,"line_start":1140,"line_end":1140,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`][`HashMap`]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40707,"byte_end":40789,"line_start":1141,"line_end":1141,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40790,"byte_end":40865,"line_start":1142,"line_end":1142,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40866,"byte_end":40869,"line_start":1143,"line_end":1143,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40870,"byte_end":40925,"line_start":1144,"line_end":1144,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40926,"byte_end":40962,"line_start":1145,"line_end":1145,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41539,"byte_end":41543,"line_start":1168,"line_end":1168,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":192}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41287,"byte_end":41332,"line_start":1161,"line_end":1161,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41333,"byte_end":41336,"line_start":1162,"line_end":1162,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41337,"byte_end":41412,"line_start":1163,"line_end":1163,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41413,"byte_end":41440,"line_start":1164,"line_end":1164,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41441,"byte_end":41444,"line_start":1165,"line_end":1165,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41445,"byte_end":41490,"line_start":1166,"line_end":1166,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41491,"byte_end":41527,"line_start":1167,"line_end":1167,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":203},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42254,"byte_end":42260,"line_start":1195,"line_end":1195,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":207}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41994,"byte_end":42041,"line_start":1188,"line_end":1188,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42042,"byte_end":42045,"line_start":1189,"line_end":1189,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42046,"byte_end":42123,"line_start":1190,"line_end":1190,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42124,"byte_end":42151,"line_start":1191,"line_end":1191,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42152,"byte_end":42155,"line_start":1192,"line_end":1192,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42156,"byte_end":42205,"line_start":1193,"line_end":1193,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42206,"byte_end":42242,"line_start":1194,"line_end":1194,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42985,"byte_end":42990,"line_start":1222,"line_end":1222,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":222}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42719,"byte_end":42775,"line_start":1215,"line_end":1215,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42776,"byte_end":42779,"line_start":1216,"line_end":1216,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42780,"byte_end":42856,"line_start":1217,"line_end":1217,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42857,"byte_end":42884,"line_start":1218,"line_end":1218,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42885,"byte_end":42888,"line_start":1219,"line_end":1219,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42889,"byte_end":42936,"line_start":1220,"line_end":1220,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42937,"byte_end":42973,"line_start":1221,"line_end":1221,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":228},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43603,"byte_end":43612,"line_start":1244,"line_end":1244,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":232}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43324,"byte_end":43378,"line_start":1237,"line_end":1237,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43379,"byte_end":43382,"line_start":1238,"line_end":1238,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43383,"byte_end":43464,"line_start":1239,"line_end":1239,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43465,"byte_end":43492,"line_start":1240,"line_end":1240,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43493,"byte_end":43496,"line_start":1241,"line_end":1241,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43497,"byte_end":43554,"line_start":1242,"line_end":1242,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43555,"byte_end":43591,"line_start":1243,"line_end":1243,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":233},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43903,"byte_end":43921,"line_start":1253,"line_end":1253,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":238}],"decl_id":null,"docs":" A builder for computing where in a HashMap a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a HashMap a key-value pair would be stored.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43666,"byte_end":43746,"line_start":1248,"line_end":1248,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43747,"byte_end":43750,"line_start":1249,"line_end":1249,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43751,"byte_end":43814,"line_start":1250,"line_end":1250,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43815,"byte_end":43818,"line_start":1251,"line_end":1251,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43819,"byte_end":43891,"line_start":1252,"line_end":1252,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":244},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44408,"byte_end":44416,"line_start":1268,"line_end":1268,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44381,"byte_end":44403,"line_start":1267,"line_end":1267,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":247},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44477,"byte_end":44483,"line_start":1270,"line_end":1270,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44453,"byte_end":44472,"line_start":1269,"line_end":1269,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":239},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44338,"byte_end":44349,"line_start":1266,"line_end":1266,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n\n    /// An occupied entry.\n    Occupied(RawOccupiedEntryMut),\n\n    /// A vacant entry.\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":247}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43987,"byte_end":44067,"line_start":1257,"line_end":1257,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44068,"byte_end":44071,"line_start":1258,"line_end":1258,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44072,"byte_end":44119,"line_start":1259,"line_end":1259,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44120,"byte_end":44123,"line_start":1260,"line_end":1260,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`raw_entry`] method on [`HashMap`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44124,"byte_end":44200,"line_start":1261,"line_end":1261,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44201,"byte_end":44204,"line_start":1262,"line_end":1262,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44205,"byte_end":44241,"line_start":1263,"line_end":1263,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44242,"byte_end":44272,"line_start":1264,"line_end":1264,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44273,"byte_end":44328,"line_start":1265,"line_end":1265,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44672,"byte_end":44691,"line_start":1277,"line_end":1277,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44520,"byte_end":44569,"line_start":1273,"line_end":1273,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44570,"byte_end":44613,"line_start":1274,"line_end":1274,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44614,"byte_end":44617,"line_start":1275,"line_end":1275,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44618,"byte_end":44660,"line_start":1276,"line_end":1276,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44927,"byte_end":44944,"line_start":1286,"line_end":1286,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44778,"byte_end":44824,"line_start":1282,"line_end":1282,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44825,"byte_end":44868,"line_start":1283,"line_end":1283,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44869,"byte_end":44872,"line_start":1284,"line_end":1284,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":44873,"byte_end":44915,"line_start":1285,"line_end":1285,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":263},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45262,"byte_end":45277,"line_start":1296,"line_end":1296,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":268}],"decl_id":null,"docs":" A builder for computing where in a HashMap a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a HashMap a key-value pair would be stored.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45037,"byte_end":45117,"line_start":1291,"line_end":1291,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45118,"byte_end":45121,"line_start":1292,"line_end":1292,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45122,"byte_end":45181,"line_start":1293,"line_end":1293,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45182,"byte_end":45185,"line_start":1294,"line_end":1294,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45186,"byte_end":45250,"line_start":1295,"line_end":1295,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45511,"byte_end":45519,"line_start":1307,"line_end":1307,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Create a `RawEntryMut` from the given key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45439,"byte_end":45485,"line_start":1305,"line_end":1305,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45490,"byte_end":45499,"line_start":1306,"line_end":1306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45877,"byte_end":45900,"line_start":1319,"line_end":1319,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Create a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45792,"byte_end":45851,"line_start":1317,"line_end":1317,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45856,"byte_end":45865,"line_start":1318,"line_end":1318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46709,"byte_end":46718,"line_start":1346,"line_end":1346,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Create a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Create a `RawEntryMut` from the given hash.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46636,"byte_end":46683,"line_start":1344,"line_end":1344,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46688,"byte_end":46697,"line_start":1345,"line_end":1345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47014,"byte_end":47022,"line_start":1360,"line_end":1360,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46961,"byte_end":46988,"line_start":1358,"line_end":1358,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46993,"byte_end":47002,"line_start":1359,"line_end":1359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47361,"byte_end":47384,"line_start":1372,"line_end":1372,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47293,"byte_end":47335,"line_start":1370,"line_end":1370,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47340,"byte_end":47349,"line_start":1371,"line_end":1371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47984,"byte_end":47993,"line_start":1396,"line_end":1396,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47930,"byte_end":47958,"line_start":1394,"line_end":1394,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":47963,"byte_end":47972,"line_start":1395,"line_end":1395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48781,"byte_end":48790,"line_start":1422,"line_end":1422,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48193,"byte_end":48275,"line_start":1405,"line_end":1405,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48280,"byte_end":48337,"line_start":1406,"line_end":1406,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48342,"byte_end":48345,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48350,"byte_end":48364,"line_start":1408,"line_end":1408,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48369,"byte_end":48372,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48377,"byte_end":48384,"line_start":1410,"line_end":1410,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48389,"byte_end":48416,"line_start":1411,"line_end":1411,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48421,"byte_end":48424,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48429,"byte_end":48482,"line_start":1413,"line_end":1413,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48487,"byte_end":48490,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48495,"byte_end":48567,"line_start":1415,"line_end":1415,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48572,"byte_end":48608,"line_start":1416,"line_end":1416,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48613,"byte_end":48616,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48621,"byte_end":48702,"line_start":1418,"line_end":1418,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48707,"byte_end":48743,"line_start":1419,"line_end":1419,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48748,"byte_end":48755,"line_start":1420,"line_end":1420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48760,"byte_end":48769,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49659,"byte_end":49673,"line_start":1450,"line_end":1450,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49104,"byte_end":49197,"line_start":1433,"line_end":1433,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49202,"byte_end":49271,"line_start":1434,"line_end":1434,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49276,"byte_end":49279,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49284,"byte_end":49298,"line_start":1436,"line_end":1436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49303,"byte_end":49306,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49311,"byte_end":49318,"line_start":1438,"line_end":1438,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49323,"byte_end":49350,"line_start":1439,"line_end":1439,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49355,"byte_end":49358,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49363,"byte_end":49419,"line_start":1441,"line_end":1441,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49424,"byte_end":49427,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49432,"byte_end":49497,"line_start":1443,"line_end":1443,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49502,"byte_end":49543,"line_start":1444,"line_end":1444,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49548,"byte_end":49555,"line_start":1445,"line_end":1445,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49560,"byte_end":49563,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49568,"byte_end":49621,"line_start":1447,"line_end":1447,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49626,"byte_end":49633,"line_start":1448,"line_end":1448,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":49638,"byte_end":49647,"line_start":1449,"line_end":1449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50734,"byte_end":50744,"line_start":1488,"line_end":1488,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50052,"byte_end":50120,"line_start":1465,"line_end":1465,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50125,"byte_end":50160,"line_start":1466,"line_end":1466,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50165,"byte_end":50168,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50173,"byte_end":50187,"line_start":1468,"line_end":1468,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50192,"byte_end":50195,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50200,"byte_end":50207,"line_start":1470,"line_end":1470,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50212,"byte_end":50239,"line_start":1471,"line_end":1471,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50244,"byte_end":50247,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50252,"byte_end":50305,"line_start":1473,"line_end":1473,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50310,"byte_end":50313,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50318,"byte_end":50341,"line_start":1475,"line_end":1475,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50346,"byte_end":50375,"line_start":1476,"line_end":1476,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50380,"byte_end":50419,"line_start":1477,"line_end":1477,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50424,"byte_end":50459,"line_start":1478,"line_end":1478,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50464,"byte_end":50501,"line_start":1479,"line_end":1479,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50506,"byte_end":50509,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50514,"byte_end":50537,"line_start":1481,"line_end":1481,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50542,"byte_end":50571,"line_start":1482,"line_end":1482,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50576,"byte_end":50615,"line_start":1483,"line_end":1483,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50620,"byte_end":50654,"line_start":1484,"line_end":1484,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50659,"byte_end":50696,"line_start":1485,"line_end":1485,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50701,"byte_end":50708,"line_start":1486,"line_end":1486,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":50713,"byte_end":50722,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51285,"byte_end":51288,"line_start":1508,"line_end":1508,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51214,"byte_end":51259,"line_start":1506,"line_end":1506,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51264,"byte_end":51273,"line_start":1507,"line_end":1507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51435,"byte_end":51442,"line_start":1514,"line_end":1514,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51356,"byte_end":51409,"line_start":1512,"line_end":1512,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51414,"byte_end":51423,"line_start":1513,"line_end":1513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51668,"byte_end":51676,"line_start":1521,"line_end":1521,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51522,"byte_end":51593,"line_start":1518,"line_end":1518,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51598,"byte_end":51642,"line_start":1519,"line_end":1519,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51647,"byte_end":51656,"line_start":1520,"line_end":1520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51827,"byte_end":51830,"line_start":1527,"line_end":1527,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51754,"byte_end":51801,"line_start":1525,"line_end":1525,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51806,"byte_end":51815,"line_start":1526,"line_end":1526,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52054,"byte_end":52062,"line_start":1534,"line_end":1534,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51898,"byte_end":51979,"line_start":1531,"line_end":1531,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51984,"byte_end":52028,"line_start":1532,"line_end":1532,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52033,"byte_end":52042,"line_start":1533,"line_end":1533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52221,"byte_end":52228,"line_start":1540,"line_end":1540,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52140,"byte_end":52195,"line_start":1538,"line_end":1538,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52200,"byte_end":52209,"line_start":1539,"line_end":1539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52389,"byte_end":52402,"line_start":1546,"line_end":1546,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52308,"byte_end":52363,"line_start":1544,"line_end":1544,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52368,"byte_end":52377,"line_start":1545,"line_end":1545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52640,"byte_end":52657,"line_start":1555,"line_end":1555,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52551,"byte_end":52614,"line_start":1553,"line_end":1553,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52619,"byte_end":52628,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52990,"byte_end":53004,"line_start":1565,"line_end":1565,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52826,"byte_end":52915,"line_start":1562,"line_end":1562,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52920,"byte_end":52964,"line_start":1563,"line_end":1563,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":52969,"byte_end":52978,"line_start":1564,"line_end":1564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53267,"byte_end":53273,"line_start":1574,"line_end":1574,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53174,"byte_end":53241,"line_start":1572,"line_end":1572,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53246,"byte_end":53255,"line_start":1573,"line_end":1573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53450,"byte_end":53460,"line_start":1580,"line_end":1580,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53357,"byte_end":53424,"line_start":1578,"line_end":1578,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53429,"byte_end":53438,"line_start":1579,"line_end":1579,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53619,"byte_end":53625,"line_start":1586,"line_end":1586,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53540,"byte_end":53593,"line_start":1584,"line_end":1584,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53598,"byte_end":53607,"line_start":1585,"line_end":1585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53763,"byte_end":53775,"line_start":1592,"line_end":1592,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53680,"byte_end":53737,"line_start":1590,"line_end":1590,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53742,"byte_end":53751,"line_start":1591,"line_end":1591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54096,"byte_end":54102,"line_start":1604,"line_end":1604,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53964,"byte_end":54023,"line_start":1601,"line_end":1601,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54028,"byte_end":54070,"line_start":1602,"line_end":1602,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54075,"byte_end":54084,"line_start":1603,"line_end":1603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54507,"byte_end":54528,"line_start":1617,"line_end":1617,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54375,"byte_end":54434,"line_start":1614,"line_end":1614,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54439,"byte_end":54481,"line_start":1615,"line_end":1615,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54486,"byte_end":54495,"line_start":1616,"line_end":1616,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":371},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56447,"byte_end":56455,"line_start":1677,"line_end":1677,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56420,"byte_end":56442,"line_start":1676,"line_end":1676,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":374},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56514,"byte_end":56520,"line_start":1680,"line_end":1680,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56490,"byte_end":56509,"line_start":1679,"line_end":1679,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":366},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56383,"byte_end":56388,"line_start":1675,"line_end":1675,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K: 'a, V: 'a, S: 'a> {\n\n    /// An occupied entry.\n    Occupied(OccupiedEntry),\n\n    /// A vacant entry.\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":374}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56127,"byte_end":56207,"line_start":1669,"line_end":1669,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56208,"byte_end":56211,"line_start":1670,"line_end":1670,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56212,"byte_end":56284,"line_start":1671,"line_end":1671,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56285,"byte_end":56288,"line_start":1672,"line_end":1672,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56289,"byte_end":56325,"line_start":1673,"line_end":1673,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56326,"byte_end":56373,"line_start":1674,"line_end":1674,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57018,"byte_end":57031,"line_start":1696,"line_end":1696,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56884,"byte_end":56933,"line_start":1692,"line_end":1692,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56934,"byte_end":56971,"line_start":1693,"line_end":1693,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56972,"byte_end":56975,"line_start":1694,"line_end":1694,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56976,"byte_end":57006,"line_start":1695,"line_end":1695,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57786,"byte_end":57797,"line_start":1730,"line_end":1730,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57655,"byte_end":57701,"line_start":1726,"line_end":1726,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57702,"byte_end":57739,"line_start":1727,"line_end":1727,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57740,"byte_end":57743,"line_start":1728,"line_end":1728,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57744,"byte_end":57774,"line_start":1729,"line_end":1729,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64238,"byte_end":64247,"line_start":2004,"line_end":2004,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63723,"byte_end":63805,"line_start":1987,"line_end":1987,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63810,"byte_end":63860,"line_start":1988,"line_end":1988,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63865,"byte_end":63868,"line_start":1989,"line_end":1989,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63873,"byte_end":63887,"line_start":1990,"line_end":1990,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63892,"byte_end":63895,"line_start":1991,"line_end":1991,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63900,"byte_end":63907,"line_start":1992,"line_end":1992,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63912,"byte_end":63939,"line_start":1993,"line_end":1993,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63944,"byte_end":63947,"line_start":1994,"line_end":1994,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63952,"byte_end":64005,"line_start":1995,"line_end":1995,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64010,"byte_end":64013,"line_start":1996,"line_end":1996,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64018,"byte_end":64058,"line_start":1997,"line_end":1997,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64063,"byte_end":64099,"line_start":1998,"line_end":1998,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64104,"byte_end":64107,"line_start":1999,"line_end":1999,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64112,"byte_end":64159,"line_start":2000,"line_end":2000,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64164,"byte_end":64200,"line_start":2001,"line_end":2001,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64205,"byte_end":64212,"line_start":2002,"line_end":2002,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64217,"byte_end":64226,"line_start":2003,"line_end":2003,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64988,"byte_end":65002,"line_start":2031,"line_end":2031,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64479,"byte_end":64572,"line_start":2015,"line_end":2015,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64577,"byte_end":64639,"line_start":2016,"line_end":2016,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64644,"byte_end":64647,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64652,"byte_end":64666,"line_start":2018,"line_end":2018,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64671,"byte_end":64674,"line_start":2019,"line_end":2019,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64679,"byte_end":64686,"line_start":2020,"line_end":2020,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64691,"byte_end":64718,"line_start":2021,"line_end":2021,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64723,"byte_end":64726,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64731,"byte_end":64787,"line_start":2023,"line_end":2023,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64792,"byte_end":64823,"line_start":2024,"line_end":2024,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64828,"byte_end":64831,"line_start":2025,"line_end":2025,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64836,"byte_end":64884,"line_start":2026,"line_end":2026,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64889,"byte_end":64892,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64897,"byte_end":64950,"line_start":2028,"line_end":2028,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64955,"byte_end":64962,"line_start":2029,"line_end":2029,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":64967,"byte_end":64976,"line_start":2030,"line_end":2030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65545,"byte_end":65548,"line_start":2053,"line_end":2053,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65254,"byte_end":65298,"line_start":2042,"line_end":2042,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65303,"byte_end":65306,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65311,"byte_end":65325,"line_start":2044,"line_end":2044,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65330,"byte_end":65333,"line_start":2045,"line_end":2045,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65338,"byte_end":65345,"line_start":2046,"line_end":2046,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65350,"byte_end":65377,"line_start":2047,"line_end":2047,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65382,"byte_end":65385,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65390,"byte_end":65443,"line_start":2049,"line_end":2049,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65448,"byte_end":65507,"line_start":2050,"line_end":2050,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65512,"byte_end":65519,"line_start":2051,"line_end":2051,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65524,"byte_end":65533,"line_start":2052,"line_end":2052,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66288,"byte_end":66298,"line_start":2081,"line_end":2081,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65701,"byte_end":65769,"line_start":2060,"line_end":2060,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65774,"byte_end":65809,"line_start":2061,"line_end":2061,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65814,"byte_end":65817,"line_start":2062,"line_end":2062,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65822,"byte_end":65836,"line_start":2063,"line_end":2063,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65841,"byte_end":65844,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65849,"byte_end":65856,"line_start":2065,"line_end":2065,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65861,"byte_end":65888,"line_start":2066,"line_end":2066,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65893,"byte_end":65896,"line_start":2067,"line_end":2067,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65901,"byte_end":65954,"line_start":2068,"line_end":2068,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65959,"byte_end":65962,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65967,"byte_end":65993,"line_start":2070,"line_end":2070,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":65998,"byte_end":66033,"line_start":2071,"line_end":2071,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66038,"byte_end":66060,"line_start":2072,"line_end":2072,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66065,"byte_end":66102,"line_start":2073,"line_end":2073,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66107,"byte_end":66110,"line_start":2074,"line_end":2074,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66115,"byte_end":66141,"line_start":2075,"line_end":2075,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66146,"byte_end":66181,"line_start":2076,"line_end":2076,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66186,"byte_end":66208,"line_start":2077,"line_end":2077,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66213,"byte_end":66250,"line_start":2078,"line_end":2078,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66255,"byte_end":66262,"line_start":2079,"line_end":2079,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66267,"byte_end":66276,"line_start":2080,"line_end":2080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67085,"byte_end":67095,"line_start":2112,"line_end":2112,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66620,"byte_end":66696,"line_start":2096,"line_end":2096,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66701,"byte_end":66763,"line_start":2097,"line_end":2097,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66768,"byte_end":66771,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66776,"byte_end":66790,"line_start":2099,"line_end":2099,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66795,"byte_end":66798,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66803,"byte_end":66810,"line_start":2101,"line_end":2101,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66815,"byte_end":66832,"line_start":2102,"line_end":2102,"column_start":5,"column_end":22}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66837,"byte_end":66864,"line_start":2103,"line_end":2103,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66869,"byte_end":66872,"line_start":2104,"line_end":2104,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66877,"byte_end":66938,"line_start":2105,"line_end":2105,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66943,"byte_end":66983,"line_start":2106,"line_end":2106,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66988,"byte_end":66991,"line_start":2107,"line_end":2107,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66996,"byte_end":67035,"line_start":2108,"line_end":2108,"column_start":5,"column_end":44}},{"value":"/ # }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67040,"byte_end":67047,"line_start":2109,"line_end":2109,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67052,"byte_end":67059,"line_start":2110,"line_end":2110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67064,"byte_end":67073,"line_start":2111,"line_end":2111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67713,"byte_end":67716,"line_start":2137,"line_end":2137,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67375,"byte_end":67420,"line_start":2125,"line_end":2125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67425,"byte_end":67428,"line_start":2126,"line_end":2126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67433,"byte_end":67447,"line_start":2127,"line_end":2127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67452,"byte_end":67455,"line_start":2128,"line_end":2128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67460,"byte_end":67467,"line_start":2129,"line_end":2129,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67472,"byte_end":67499,"line_start":2130,"line_end":2130,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67504,"byte_end":67507,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67512,"byte_end":67565,"line_start":2132,"line_end":2132,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67570,"byte_end":67611,"line_start":2133,"line_end":2133,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67616,"byte_end":67675,"line_start":2134,"line_end":2134,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67680,"byte_end":67687,"line_start":2135,"line_end":2135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67692,"byte_end":67701,"line_start":2136,"line_end":2136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68334,"byte_end":68346,"line_start":2160,"line_end":2160,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67784,"byte_end":67841,"line_start":2141,"line_end":2141,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67846,"byte_end":67849,"line_start":2142,"line_end":2142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67854,"byte_end":67868,"line_start":2143,"line_end":2143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67873,"byte_end":67876,"line_start":2144,"line_end":2144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67881,"byte_end":67888,"line_start":2145,"line_end":2145,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67893,"byte_end":67920,"line_start":2146,"line_end":2146,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67925,"byte_end":67960,"line_start":2147,"line_end":2147,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67965,"byte_end":67968,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67973,"byte_end":68026,"line_start":2149,"line_end":2149,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68031,"byte_end":68072,"line_start":2150,"line_end":2150,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68077,"byte_end":68080,"line_start":2151,"line_end":2151,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68085,"byte_end":68141,"line_start":2152,"line_end":2152,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68146,"byte_end":68190,"line_start":2153,"line_end":2153,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68195,"byte_end":68220,"line_start":2154,"line_end":2154,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68225,"byte_end":68230,"line_start":2155,"line_end":2155,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68235,"byte_end":68238,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68243,"byte_end":68296,"line_start":2157,"line_end":2157,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68301,"byte_end":68308,"line_start":2158,"line_end":2158,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68313,"byte_end":68322,"line_start":2159,"line_end":2159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68921,"byte_end":68924,"line_start":2183,"line_end":2183,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68488,"byte_end":68535,"line_start":2167,"line_end":2167,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68540,"byte_end":68543,"line_start":2168,"line_end":2168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68548,"byte_end":68562,"line_start":2169,"line_end":2169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68567,"byte_end":68570,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68575,"byte_end":68582,"line_start":2171,"line_end":2171,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68587,"byte_end":68614,"line_start":2172,"line_end":2172,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68619,"byte_end":68654,"line_start":2173,"line_end":2173,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68659,"byte_end":68662,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68667,"byte_end":68720,"line_start":2175,"line_end":2175,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68725,"byte_end":68766,"line_start":2176,"line_end":2176,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68771,"byte_end":68774,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68779,"byte_end":68835,"line_start":2178,"line_end":2178,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68840,"byte_end":68873,"line_start":2179,"line_end":2179,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68878,"byte_end":68883,"line_start":2180,"line_end":2180,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68888,"byte_end":68895,"line_start":2181,"line_end":2181,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68900,"byte_end":68909,"line_start":2182,"line_end":2182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69849,"byte_end":69856,"line_start":2215,"line_end":2215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":68992,"byte_end":69047,"line_start":2187,"line_end":2187,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69052,"byte_end":69055,"line_start":2188,"line_end":2188,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69060,"byte_end":69132,"line_start":2189,"line_end":2189,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69137,"byte_end":69192,"line_start":2190,"line_end":2190,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69197,"byte_end":69200,"line_start":2191,"line_end":2191,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69205,"byte_end":69239,"line_start":2192,"line_end":2192,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69244,"byte_end":69247,"line_start":2193,"line_end":2193,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69252,"byte_end":69266,"line_start":2194,"line_end":2194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69271,"byte_end":69274,"line_start":2195,"line_end":2195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69279,"byte_end":69286,"line_start":2196,"line_end":2196,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69291,"byte_end":69318,"line_start":2197,"line_end":2197,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69323,"byte_end":69358,"line_start":2198,"line_end":2198,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69363,"byte_end":69366,"line_start":2199,"line_end":2199,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69371,"byte_end":69424,"line_start":2200,"line_end":2200,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69429,"byte_end":69470,"line_start":2201,"line_end":2201,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69475,"byte_end":69478,"line_start":2202,"line_end":2202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69483,"byte_end":69520,"line_start":2203,"line_end":2203,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69525,"byte_end":69585,"line_start":2204,"line_end":2204,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69590,"byte_end":69617,"line_start":2205,"line_end":2205,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69622,"byte_end":69655,"line_start":2206,"line_end":2206,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69660,"byte_end":69663,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69668,"byte_end":69720,"line_start":2208,"line_end":2208,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69725,"byte_end":69751,"line_start":2209,"line_end":2209,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69756,"byte_end":69761,"line_start":2210,"line_end":2210,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69766,"byte_end":69769,"line_start":2211,"line_end":2211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69774,"byte_end":69811,"line_start":2212,"line_end":2212,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69816,"byte_end":69823,"line_start":2213,"line_end":2213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69828,"byte_end":69837,"line_start":2214,"line_end":2214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70673,"byte_end":70681,"line_start":2243,"line_end":2243,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":69936,"byte_end":70017,"line_start":2219,"line_end":2219,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70022,"byte_end":70066,"line_start":2220,"line_end":2220,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70071,"byte_end":70074,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70079,"byte_end":70155,"line_start":2222,"line_end":2222,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70160,"byte_end":70163,"line_start":2223,"line_end":2223,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70168,"byte_end":70200,"line_start":2224,"line_end":2224,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70205,"byte_end":70208,"line_start":2225,"line_end":2225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70213,"byte_end":70227,"line_start":2226,"line_end":2226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70232,"byte_end":70235,"line_start":2227,"line_end":2227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70240,"byte_end":70247,"line_start":2228,"line_end":2228,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70252,"byte_end":70279,"line_start":2229,"line_end":2229,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70284,"byte_end":70319,"line_start":2230,"line_end":2230,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70324,"byte_end":70327,"line_start":2231,"line_end":2231,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70332,"byte_end":70385,"line_start":2232,"line_end":2232,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70390,"byte_end":70431,"line_start":2233,"line_end":2233,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70436,"byte_end":70439,"line_start":2234,"line_end":2234,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70444,"byte_end":70481,"line_start":2235,"line_end":2235,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70486,"byte_end":70542,"line_start":2236,"line_end":2236,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70547,"byte_end":70575,"line_start":2237,"line_end":2237,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70580,"byte_end":70585,"line_start":2238,"line_end":2238,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70590,"byte_end":70593,"line_start":2239,"line_end":2239,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70598,"byte_end":70635,"line_start":2240,"line_end":2240,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70640,"byte_end":70647,"line_start":2241,"line_end":2241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70652,"byte_end":70661,"line_start":2242,"line_end":2242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71270,"byte_end":71276,"line_start":2265,"line_end":2265,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70759,"byte_end":70826,"line_start":2247,"line_end":2247,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70831,"byte_end":70834,"line_start":2248,"line_end":2248,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70839,"byte_end":70853,"line_start":2249,"line_end":2249,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70858,"byte_end":70861,"line_start":2250,"line_end":2250,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70866,"byte_end":70873,"line_start":2251,"line_end":2251,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70878,"byte_end":70905,"line_start":2252,"line_end":2252,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70910,"byte_end":70945,"line_start":2253,"line_end":2253,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70950,"byte_end":70953,"line_start":2254,"line_end":2254,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":70958,"byte_end":71011,"line_start":2255,"line_end":2255,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71016,"byte_end":71057,"line_start":2256,"line_end":2256,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71062,"byte_end":71065,"line_start":2257,"line_end":2257,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71070,"byte_end":71130,"line_start":2258,"line_end":2258,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71135,"byte_end":71172,"line_start":2259,"line_end":2259,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71177,"byte_end":71182,"line_start":2260,"line_end":2260,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71187,"byte_end":71190,"line_start":2261,"line_end":2261,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71195,"byte_end":71232,"line_start":2262,"line_end":2262,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71237,"byte_end":71244,"line_start":2263,"line_end":2263,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71249,"byte_end":71258,"line_start":2264,"line_end":2264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71923,"byte_end":71929,"line_start":2289,"line_end":2289,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71416,"byte_end":71469,"line_start":2271,"line_end":2271,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71474,"byte_end":71477,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71482,"byte_end":71496,"line_start":2273,"line_end":2273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71501,"byte_end":71504,"line_start":2274,"line_end":2274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71509,"byte_end":71516,"line_start":2275,"line_end":2275,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71521,"byte_end":71548,"line_start":2276,"line_end":2276,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71553,"byte_end":71588,"line_start":2277,"line_end":2277,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71593,"byte_end":71596,"line_start":2278,"line_end":2278,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71601,"byte_end":71654,"line_start":2279,"line_end":2279,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71659,"byte_end":71700,"line_start":2280,"line_end":2280,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71705,"byte_end":71708,"line_start":2281,"line_end":2281,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71713,"byte_end":71769,"line_start":2282,"line_end":2282,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71774,"byte_end":71809,"line_start":2283,"line_end":2283,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71814,"byte_end":71819,"line_start":2284,"line_end":2284,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71824,"byte_end":71827,"line_start":2285,"line_end":2285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71832,"byte_end":71885,"line_start":2286,"line_end":2286,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71890,"byte_end":71897,"line_start":2287,"line_end":2287,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71902,"byte_end":71911,"line_start":2288,"line_end":2288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72714,"byte_end":72727,"line_start":2314,"line_end":2314,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":71984,"byte_end":72076,"line_start":2293,"line_end":2293,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72081,"byte_end":72119,"line_start":2294,"line_end":2294,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72124,"byte_end":72127,"line_start":2295,"line_end":2295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72132,"byte_end":72146,"line_start":2296,"line_end":2296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72151,"byte_end":72154,"line_start":2297,"line_end":2297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72159,"byte_end":72166,"line_start":2298,"line_end":2298,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72171,"byte_end":72217,"line_start":2299,"line_end":2299,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72222,"byte_end":72242,"line_start":2300,"line_end":2300,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72247,"byte_end":72250,"line_start":2301,"line_end":2301,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72255,"byte_end":72314,"line_start":2302,"line_end":2302,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72319,"byte_end":72374,"line_start":2303,"line_end":2303,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72379,"byte_end":72382,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72387,"byte_end":72439,"line_start":2305,"line_end":2305,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72444,"byte_end":72447,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72452,"byte_end":72507,"line_start":2307,"line_end":2307,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72512,"byte_end":72575,"line_start":2308,"line_end":2308,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72580,"byte_end":72658,"line_start":2309,"line_end":2309,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72663,"byte_end":72668,"line_start":2310,"line_end":2310,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72673,"byte_end":72676,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72681,"byte_end":72688,"line_start":2312,"line_end":2312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72693,"byte_end":72702,"line_start":2313,"line_end":2313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73853,"byte_end":73864,"line_start":2348,"line_end":2348,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":72977,"byte_end":73053,"line_start":2323,"line_end":2323,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73058,"byte_end":73061,"line_start":2324,"line_end":2324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73066,"byte_end":73080,"line_start":2325,"line_end":2325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73085,"byte_end":73088,"line_start":2326,"line_end":2326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73093,"byte_end":73100,"line_start":2327,"line_end":2327,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73105,"byte_end":73151,"line_start":2328,"line_end":2328,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73156,"byte_end":73176,"line_start":2329,"line_end":2329,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73181,"byte_end":73184,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73189,"byte_end":73248,"line_start":2331,"line_end":2331,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73253,"byte_end":73309,"line_start":2332,"line_end":2332,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73314,"byte_end":73317,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73322,"byte_end":73372,"line_start":2334,"line_end":2334,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73377,"byte_end":73380,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73385,"byte_end":73430,"line_start":2336,"line_end":2336,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73435,"byte_end":73438,"line_start":2337,"line_end":2337,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73443,"byte_end":73533,"line_start":2338,"line_end":2338,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73538,"byte_end":73570,"line_start":2339,"line_end":2339,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73575,"byte_end":73641,"line_start":2340,"line_end":2340,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73646,"byte_end":73732,"line_start":2341,"line_end":2341,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73737,"byte_end":73773,"line_start":2342,"line_end":2342,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73778,"byte_end":73791,"line_start":2343,"line_end":2343,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73796,"byte_end":73805,"line_start":2344,"line_end":2344,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73810,"byte_end":73815,"line_start":2345,"line_end":2345,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73820,"byte_end":73827,"line_start":2346,"line_end":2346,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":73832,"byte_end":73841,"line_start":2347,"line_end":2347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74404,"byte_end":74407,"line_start":2367,"line_end":2367,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74049,"byte_end":74122,"line_start":2355,"line_end":2355,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74127,"byte_end":74157,"line_start":2356,"line_end":2356,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74162,"byte_end":74165,"line_start":2357,"line_end":2357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74170,"byte_end":74184,"line_start":2358,"line_end":2358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74189,"byte_end":74192,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74197,"byte_end":74204,"line_start":2360,"line_end":2360,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74209,"byte_end":74236,"line_start":2361,"line_end":2361,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74241,"byte_end":74244,"line_start":2362,"line_end":2362,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74249,"byte_end":74302,"line_start":2363,"line_end":2363,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74307,"byte_end":74366,"line_start":2364,"line_end":2364,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74371,"byte_end":74378,"line_start":2365,"line_end":2365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74383,"byte_end":74392,"line_start":2366,"line_end":2366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74808,"byte_end":74816,"line_start":2386,"line_end":2386,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74452,"byte_end":74482,"line_start":2371,"line_end":2371,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74487,"byte_end":74490,"line_start":2372,"line_end":2372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74495,"byte_end":74509,"line_start":2373,"line_end":2373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74514,"byte_end":74517,"line_start":2374,"line_end":2374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74522,"byte_end":74529,"line_start":2375,"line_end":2375,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74534,"byte_end":74561,"line_start":2376,"line_end":2376,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74566,"byte_end":74601,"line_start":2377,"line_end":2377,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74606,"byte_end":74609,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74614,"byte_end":74667,"line_start":2379,"line_end":2379,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74672,"byte_end":74675,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74680,"byte_end":74734,"line_start":2381,"line_end":2381,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74739,"byte_end":74760,"line_start":2382,"line_end":2382,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74765,"byte_end":74770,"line_start":2383,"line_end":2383,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74775,"byte_end":74782,"line_start":2384,"line_end":2384,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74787,"byte_end":74796,"line_start":2385,"line_end":2385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75332,"byte_end":75338,"line_start":2407,"line_end":2407,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74858,"byte_end":74917,"line_start":2390,"line_end":2390,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74922,"byte_end":74964,"line_start":2391,"line_end":2391,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74969,"byte_end":74972,"line_start":2392,"line_end":2392,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74977,"byte_end":74991,"line_start":2393,"line_end":2393,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74996,"byte_end":74999,"line_start":2394,"line_end":2394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75004,"byte_end":75011,"line_start":2395,"line_end":2395,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75016,"byte_end":75043,"line_start":2396,"line_end":2396,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75048,"byte_end":75083,"line_start":2397,"line_end":2397,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75088,"byte_end":75091,"line_start":2398,"line_end":2398,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75096,"byte_end":75149,"line_start":2399,"line_end":2399,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75154,"byte_end":75157,"line_start":2400,"line_end":2400,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75162,"byte_end":75216,"line_start":2401,"line_end":2401,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75221,"byte_end":75242,"line_start":2402,"line_end":2402,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75247,"byte_end":75252,"line_start":2403,"line_end":2403,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75257,"byte_end":75294,"line_start":2404,"line_end":2404,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75299,"byte_end":75306,"line_start":2405,"line_end":2405,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75311,"byte_end":75320,"line_start":2406,"line_end":2406,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1315},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156451,"byte_end":156458,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1318}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153028,"byte_end":153094,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153095,"byte_end":153098,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153099,"byte_end":153171,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153172,"byte_end":153252,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153253,"byte_end":153329,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153330,"byte_end":153384,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153385,"byte_end":153388,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153389,"byte_end":153400,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153401,"byte_end":153437,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153438,"byte_end":153445,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153446,"byte_end":153449,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153450,"byte_end":153520,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153521,"byte_end":153524,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153525,"byte_end":153528,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153529,"byte_end":153602,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153603,"byte_end":153676,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153677,"byte_end":153752,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153753,"byte_end":153832,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153833,"byte_end":153849,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153850,"byte_end":153853,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153854,"byte_end":153933,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":153934,"byte_end":154012,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154013,"byte_end":154093,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154094,"byte_end":154139,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154140,"byte_end":154143,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154144,"byte_end":154158,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154159,"byte_end":154162,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154163,"byte_end":154170,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154171,"byte_end":154198,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154199,"byte_end":154267,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154268,"byte_end":154319,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154320,"byte_end":154355,"line_start":48,"line_end":48,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154356,"byte_end":154359,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154360,"byte_end":154382,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154383,"byte_end":154436,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154437,"byte_end":154491,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154492,"byte_end":154536,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154537,"byte_end":154586,"line_start":54,"line_end":54,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154587,"byte_end":154590,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154591,"byte_end":154623,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154624,"byte_end":154671,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154672,"byte_end":154744,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154745,"byte_end":154775,"line_start":59,"line_end":59,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154776,"byte_end":154781,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154782,"byte_end":154785,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154786,"byte_end":154807,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154808,"byte_end":154840,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154841,"byte_end":154844,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154845,"byte_end":154876,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154877,"byte_end":154901,"line_start":66,"line_end":66,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154902,"byte_end":154931,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154932,"byte_end":154937,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154938,"byte_end":154945,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154946,"byte_end":154949,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":154950,"byte_end":155018,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155019,"byte_end":155095,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155096,"byte_end":155128,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155129,"byte_end":155132,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155133,"byte_end":155140,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155141,"byte_end":155168,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155169,"byte_end":155210,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155211,"byte_end":155230,"line_start":78,"line_end":78,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155231,"byte_end":155252,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155253,"byte_end":155274,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155275,"byte_end":155280,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155281,"byte_end":155284,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155285,"byte_end":155322,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155323,"byte_end":155326,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155327,"byte_end":155394,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155395,"byte_end":155462,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155463,"byte_end":155529,"line_start":87,"line_end":87,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155530,"byte_end":155598,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155599,"byte_end":155602,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155603,"byte_end":155658,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155659,"byte_end":155682,"line_start":91,"line_end":91,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155683,"byte_end":155711,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155712,"byte_end":155717,"line_start":93,"line_end":93,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155718,"byte_end":155725,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155726,"byte_end":155729,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155730,"byte_end":155807,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155808,"byte_end":155811,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155812,"byte_end":155819,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155820,"byte_end":155847,"line_start":99,"line_end":99,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155848,"byte_end":155851,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155852,"byte_end":155867,"line_start":101,"line_end":101,"column_start":1,"column_end":16}},{"value":"/     let viking_names: HashSet<&'static str> =","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155868,"byte_end":155917,"line_start":102,"line_end":102,"column_start":1,"column_end":50}},{"value":"/         [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155918,"byte_end":155986,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/     // use the values stored in the set","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":155987,"byte_end":156030,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156031,"byte_end":156036,"line_start":105,"line_end":105,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156037,"byte_end":156044,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156045,"byte_end":156048,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156049,"byte_end":156114,"line_start":108,"line_end":108,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156115,"byte_end":156174,"line_start":109,"line_end":109,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156175,"byte_end":156239,"line_start":110,"line_end":110,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156240,"byte_end":156276,"line_start":111,"line_end":111,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156277,"byte_end":156350,"line_start":112,"line_end":112,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156351,"byte_end":156422,"line_start":113,"line_end":113,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156919,"byte_end":156922,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"pub fn new() -> HashSet<T, DefaultHashBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156586,"byte_end":156617,"line_start":120,"line_end":120,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156622,"byte_end":156625,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156630,"byte_end":156722,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156727,"byte_end":156754,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156759,"byte_end":156762,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156767,"byte_end":156781,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156786,"byte_end":156789,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156794,"byte_end":156801,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156806,"byte_end":156833,"line_start":128,"line_end":128,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156838,"byte_end":156881,"line_start":129,"line_end":129,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156886,"byte_end":156893,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156898,"byte_end":156907,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157469,"byte_end":157482,"line_start":151,"line_end":151,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> HashSet<T, DefaultHashBuilder>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157033,"byte_end":157092,"line_start":138,"line_end":138,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157097,"byte_end":157100,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157105,"byte_end":157179,"line_start":140,"line_end":140,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157184,"byte_end":157253,"line_start":141,"line_end":141,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157258,"byte_end":157261,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157266,"byte_end":157280,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157285,"byte_end":157288,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157293,"byte_end":157300,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157305,"byte_end":157332,"line_start":146,"line_end":146,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157337,"byte_end":157392,"line_start":147,"line_end":147,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157397,"byte_end":157431,"line_start":148,"line_end":148,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157436,"byte_end":157443,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157448,"byte_end":157457,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158439,"byte_end":158450,"line_start":184,"line_end":184,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> HashSet<T, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157699,"byte_end":157771,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157776,"byte_end":157785,"line_start":164,"line_end":164,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157790,"byte_end":157793,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157798,"byte_end":157865,"line_start":166,"line_end":166,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157870,"byte_end":157873,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157878,"byte_end":157935,"line_start":168,"line_end":168,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157940,"byte_end":158007,"line_start":169,"line_end":169,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158012,"byte_end":158075,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158080,"byte_end":158144,"line_start":171,"line_end":171,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158149,"byte_end":158152,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158157,"byte_end":158171,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158176,"byte_end":158179,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158184,"byte_end":158191,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158196,"byte_end":158223,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158228,"byte_end":158276,"line_start":177,"line_end":177,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158281,"byte_end":158284,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158289,"byte_end":158331,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158336,"byte_end":158378,"line_start":180,"line_end":180,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158383,"byte_end":158401,"line_start":181,"line_end":181,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158406,"byte_end":158413,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158418,"byte_end":158427,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159419,"byte_end":159443,"line_start":212,"line_end":212,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> HashSet<T, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158567,"byte_end":158632,"line_start":190,"line_end":190,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158637,"byte_end":158667,"line_start":191,"line_end":191,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158672,"byte_end":158675,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158680,"byte_end":158754,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158759,"byte_end":158828,"line_start":194,"line_end":194,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158833,"byte_end":158836,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158841,"byte_end":158898,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158903,"byte_end":158970,"line_start":197,"line_end":197,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":158975,"byte_end":159038,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159043,"byte_end":159107,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159112,"byte_end":159115,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159120,"byte_end":159134,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159139,"byte_end":159142,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159147,"byte_end":159154,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159159,"byte_end":159186,"line_start":204,"line_end":204,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159191,"byte_end":159239,"line_start":205,"line_end":205,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159244,"byte_end":159247,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159252,"byte_end":159294,"line_start":207,"line_end":207,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159299,"byte_end":159358,"line_start":208,"line_end":208,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159363,"byte_end":159381,"line_start":209,"line_end":209,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159386,"byte_end":159393,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159398,"byte_end":159407,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160092,"byte_end":160098,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159600,"byte_end":159653,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159658,"byte_end":159661,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159666,"byte_end":159744,"line_start":220,"line_end":220,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159749,"byte_end":159752,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159757,"byte_end":159771,"line_start":222,"line_end":222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159776,"byte_end":159779,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159784,"byte_end":159791,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159796,"byte_end":159823,"line_start":225,"line_end":225,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159828,"byte_end":159876,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159881,"byte_end":159884,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159889,"byte_end":159936,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":159941,"byte_end":159998,"line_start":229,"line_end":229,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160003,"byte_end":160054,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160059,"byte_end":160066,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160071,"byte_end":160080,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160442,"byte_end":160450,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160151,"byte_end":160224,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160229,"byte_end":160232,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160237,"byte_end":160251,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160256,"byte_end":160259,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160264,"byte_end":160271,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160276,"byte_end":160303,"line_start":242,"line_end":242,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160308,"byte_end":160364,"line_start":243,"line_end":243,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160369,"byte_end":160404,"line_start":244,"line_end":244,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160409,"byte_end":160416,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160421,"byte_end":160430,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161016,"byte_end":161023,"line_start":268,"line_end":268,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160508,"byte_end":160584,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160589,"byte_end":160657,"line_start":252,"line_end":252,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160662,"byte_end":160689,"line_start":253,"line_end":253,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160694,"byte_end":160697,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160702,"byte_end":160714,"line_start":255,"line_end":255,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160719,"byte_end":160722,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160727,"byte_end":160783,"line_start":257,"line_end":257,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160788,"byte_end":160791,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160796,"byte_end":160810,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160815,"byte_end":160818,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160823,"byte_end":160830,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160835,"byte_end":160862,"line_start":262,"line_end":262,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160867,"byte_end":160914,"line_start":263,"line_end":263,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160919,"byte_end":160939,"line_start":264,"line_end":264,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160944,"byte_end":160978,"line_start":265,"line_end":265,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160983,"byte_end":160990,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":160995,"byte_end":161004,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161695,"byte_end":161706,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161104,"byte_end":161188,"line_start":272,"line_end":272,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161193,"byte_end":161272,"line_start":273,"line_end":273,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161277,"byte_end":161304,"line_start":274,"line_end":274,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161309,"byte_end":161312,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161317,"byte_end":161329,"line_start":276,"line_end":276,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161334,"byte_end":161337,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161342,"byte_end":161422,"line_start":278,"line_end":278,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161427,"byte_end":161443,"line_start":279,"line_end":279,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161448,"byte_end":161451,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161456,"byte_end":161470,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161475,"byte_end":161478,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161483,"byte_end":161490,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161495,"byte_end":161522,"line_start":284,"line_end":284,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161527,"byte_end":161574,"line_start":285,"line_end":285,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161579,"byte_end":161657,"line_start":286,"line_end":286,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161662,"byte_end":161669,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161674,"byte_end":161683,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162371,"byte_end":162384,"line_start":310,"line_end":310,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161825,"byte_end":161894,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161899,"byte_end":161964,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":161969,"byte_end":162042,"line_start":295,"line_end":295,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162047,"byte_end":162050,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162055,"byte_end":162069,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162074,"byte_end":162077,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162082,"byte_end":162089,"line_start":299,"line_end":299,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162094,"byte_end":162121,"line_start":300,"line_end":300,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162126,"byte_end":162129,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162134,"byte_end":162180,"line_start":302,"line_end":302,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162185,"byte_end":162203,"line_start":303,"line_end":303,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162208,"byte_end":162226,"line_start":304,"line_end":304,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162231,"byte_end":162266,"line_start":305,"line_end":305,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162271,"byte_end":162295,"line_start":306,"line_end":306,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162300,"byte_end":162333,"line_start":307,"line_end":307,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162338,"byte_end":162345,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162350,"byte_end":162359,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163165,"byte_end":163174,"line_start":336,"line_end":336,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162442,"byte_end":162510,"line_start":314,"line_end":314,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162515,"byte_end":162593,"line_start":315,"line_end":315,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162598,"byte_end":162671,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162676,"byte_end":162679,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162684,"byte_end":162747,"line_start":318,"line_end":318,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162752,"byte_end":162773,"line_start":319,"line_end":319,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162778,"byte_end":162781,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162786,"byte_end":162800,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162805,"byte_end":162808,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162813,"byte_end":162820,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162825,"byte_end":162852,"line_start":324,"line_end":324,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162857,"byte_end":162860,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162865,"byte_end":162911,"line_start":326,"line_end":326,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162916,"byte_end":162934,"line_start":327,"line_end":327,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162939,"byte_end":162957,"line_start":328,"line_end":328,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":162962,"byte_end":162997,"line_start":329,"line_end":329,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163002,"byte_end":163024,"line_start":330,"line_end":330,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163029,"byte_end":163063,"line_start":331,"line_end":331,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163068,"byte_end":163089,"line_start":332,"line_end":332,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163094,"byte_end":163127,"line_start":333,"line_end":333,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163132,"byte_end":163139,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163144,"byte_end":163153,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163693,"byte_end":163697,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163261,"byte_end":163318,"line_start":340,"line_end":340,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163323,"byte_end":163364,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163369,"byte_end":163372,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163377,"byte_end":163391,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163396,"byte_end":163399,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163404,"byte_end":163411,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163416,"byte_end":163443,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163448,"byte_end":163481,"line_start":347,"line_end":347,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163486,"byte_end":163506,"line_start":348,"line_end":348,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163511,"byte_end":163531,"line_start":349,"line_end":349,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163536,"byte_end":163539,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163544,"byte_end":163584,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163589,"byte_end":163614,"line_start":352,"line_end":352,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163619,"byte_end":163645,"line_start":353,"line_end":353,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163650,"byte_end":163655,"line_start":354,"line_end":354,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163660,"byte_end":163667,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163672,"byte_end":163681,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164609,"byte_end":164619,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"pub fn difference<'a>(&'a Self, &'a HashSet<T, S>) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163789,"byte_end":163839,"line_start":363,"line_end":363,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163844,"byte_end":163903,"line_start":364,"line_end":364,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163908,"byte_end":163911,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163916,"byte_end":163930,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163935,"byte_end":163938,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163943,"byte_end":163950,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163955,"byte_end":163982,"line_start":369,"line_end":369,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":163987,"byte_end":164047,"line_start":370,"line_end":370,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164052,"byte_end":164115,"line_start":371,"line_end":371,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164120,"byte_end":164123,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164128,"byte_end":164158,"line_start":373,"line_end":373,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164163,"byte_end":164194,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164199,"byte_end":164236,"line_start":375,"line_end":375,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164241,"byte_end":164246,"line_start":376,"line_end":376,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164251,"byte_end":164254,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164259,"byte_end":164313,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164318,"byte_end":164361,"line_start":379,"line_end":379,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164366,"byte_end":164369,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164374,"byte_end":164419,"line_start":381,"line_end":381,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164424,"byte_end":164464,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164469,"byte_end":164523,"line_start":383,"line_end":383,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164528,"byte_end":164571,"line_start":384,"line_end":384,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164576,"byte_end":164583,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164588,"byte_end":164597,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165542,"byte_end":165562,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a HashSet<T, S>)\n-> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164778,"byte_end":164838,"line_start":394,"line_end":394,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164843,"byte_end":164913,"line_start":395,"line_end":395,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164918,"byte_end":164921,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164926,"byte_end":164940,"line_start":397,"line_end":397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164945,"byte_end":164948,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164953,"byte_end":164960,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164965,"byte_end":164992,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":164997,"byte_end":165057,"line_start":401,"line_end":401,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165062,"byte_end":165125,"line_start":402,"line_end":402,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165130,"byte_end":165133,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165138,"byte_end":165175,"line_start":404,"line_end":404,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165180,"byte_end":165221,"line_start":405,"line_end":405,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165226,"byte_end":165252,"line_start":406,"line_end":406,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165257,"byte_end":165262,"line_start":407,"line_end":407,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165267,"byte_end":165270,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165275,"byte_end":165340,"line_start":409,"line_end":409,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165345,"byte_end":165410,"line_start":410,"line_end":410,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165415,"byte_end":165418,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165423,"byte_end":165452,"line_start":412,"line_end":412,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165457,"byte_end":165504,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165509,"byte_end":165516,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165521,"byte_end":165530,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166413,"byte_end":166425,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a HashSet<T, S>) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165784,"byte_end":165836,"line_start":425,"line_end":425,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165841,"byte_end":165898,"line_start":426,"line_end":426,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165903,"byte_end":165906,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165911,"byte_end":165925,"line_start":428,"line_end":428,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165930,"byte_end":165933,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165938,"byte_end":165945,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165950,"byte_end":165977,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":165982,"byte_end":166042,"line_start":432,"line_end":432,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166047,"byte_end":166110,"line_start":433,"line_end":433,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166115,"byte_end":166118,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166123,"byte_end":166160,"line_start":435,"line_end":435,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166165,"byte_end":166198,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166203,"byte_end":166229,"line_start":437,"line_end":437,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166234,"byte_end":166239,"line_start":438,"line_end":438,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166244,"byte_end":166247,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166252,"byte_end":166316,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166321,"byte_end":166375,"line_start":441,"line_end":441,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166380,"byte_end":166387,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166392,"byte_end":166401,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167203,"byte_end":167208,"line_start":470,"line_end":470,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"pub fn union<'a>(&'a Self, &'a HashSet<T, S>) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166588,"byte_end":166633,"line_start":451,"line_end":451,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166638,"byte_end":166704,"line_start":452,"line_end":452,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166709,"byte_end":166712,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166717,"byte_end":166731,"line_start":454,"line_end":454,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166736,"byte_end":166739,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166744,"byte_end":166751,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166756,"byte_end":166783,"line_start":457,"line_end":457,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166788,"byte_end":166848,"line_start":458,"line_end":458,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166853,"byte_end":166916,"line_start":459,"line_end":459,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166921,"byte_end":166924,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166929,"byte_end":166972,"line_start":461,"line_end":461,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":166977,"byte_end":167003,"line_start":462,"line_end":462,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167008,"byte_end":167034,"line_start":463,"line_end":463,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167039,"byte_end":167044,"line_start":464,"line_end":464,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167049,"byte_end":167052,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167057,"byte_end":167107,"line_start":466,"line_end":466,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167112,"byte_end":167165,"line_start":467,"line_end":467,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167170,"byte_end":167177,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167182,"byte_end":167191,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167660,"byte_end":167663,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167368,"byte_end":167414,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167419,"byte_end":167422,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167427,"byte_end":167441,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167446,"byte_end":167449,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167454,"byte_end":167461,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167466,"byte_end":167493,"line_start":481,"line_end":481,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167498,"byte_end":167501,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167506,"byte_end":167537,"line_start":483,"line_end":483,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167542,"byte_end":167569,"line_start":484,"line_end":484,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167574,"byte_end":167590,"line_start":485,"line_end":485,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167595,"byte_end":167622,"line_start":486,"line_end":486,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167627,"byte_end":167634,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167639,"byte_end":167648,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168010,"byte_end":168018,"line_start":506,"line_end":506,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167716,"byte_end":167765,"line_start":493,"line_end":493,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167770,"byte_end":167773,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167778,"byte_end":167792,"line_start":495,"line_end":495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167797,"byte_end":167800,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167805,"byte_end":167812,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167817,"byte_end":167844,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167849,"byte_end":167852,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167857,"byte_end":167888,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167893,"byte_end":167919,"line_start":501,"line_end":501,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167924,"byte_end":167940,"line_start":502,"line_end":502,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167945,"byte_end":167972,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167977,"byte_end":167984,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":167989,"byte_end":167998,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168531,"byte_end":168536,"line_start":528,"line_end":528,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168075,"byte_end":168133,"line_start":510,"line_end":510,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168138,"byte_end":168141,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168146,"byte_end":168160,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168165,"byte_end":168168,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168173,"byte_end":168180,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168185,"byte_end":168212,"line_start":515,"line_end":515,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168217,"byte_end":168220,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168225,"byte_end":168291,"line_start":517,"line_end":517,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168296,"byte_end":168325,"line_start":518,"line_end":518,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168330,"byte_end":168333,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168338,"byte_end":168380,"line_start":520,"line_end":520,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168385,"byte_end":168411,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168416,"byte_end":168442,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168447,"byte_end":168452,"line_start":523,"line_end":523,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168457,"byte_end":168460,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168465,"byte_end":168493,"line_start":525,"line_end":525,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168498,"byte_end":168505,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168510,"byte_end":168519,"line_start":527,"line_end":527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168907,"byte_end":168912,"line_start":547,"line_end":547,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168635,"byte_end":168675,"line_start":534,"line_end":534,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168680,"byte_end":168683,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168688,"byte_end":168702,"line_start":536,"line_end":536,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168707,"byte_end":168710,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168715,"byte_end":168722,"line_start":538,"line_end":538,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168727,"byte_end":168754,"line_start":539,"line_end":539,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168759,"byte_end":168762,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168767,"byte_end":168798,"line_start":541,"line_end":541,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168803,"byte_end":168819,"line_start":542,"line_end":542,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168824,"byte_end":168838,"line_start":543,"line_end":543,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168843,"byte_end":168869,"line_start":544,"line_end":544,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168874,"byte_end":168881,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168886,"byte_end":168895,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169607,"byte_end":169615,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":168962,"byte_end":169009,"line_start":551,"line_end":551,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169014,"byte_end":169017,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169022,"byte_end":169089,"line_start":553,"line_end":553,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169094,"byte_end":169161,"line_start":554,"line_end":554,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169166,"byte_end":169185,"line_start":555,"line_end":555,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169190,"byte_end":169193,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169198,"byte_end":169212,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169217,"byte_end":169220,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169225,"byte_end":169232,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169237,"byte_end":169264,"line_start":560,"line_end":560,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169269,"byte_end":169272,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169277,"byte_end":169339,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169344,"byte_end":169383,"line_start":563,"line_end":563,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169388,"byte_end":169428,"line_start":564,"line_end":564,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169433,"byte_end":169440,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169445,"byte_end":169448,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169453,"byte_end":169512,"line_start":567,"line_end":567,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169517,"byte_end":169581,"line_start":568,"line_end":568,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169586,"byte_end":169595,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170442,"byte_end":170445,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169761,"byte_end":169851,"line_start":578,"line_end":578,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169856,"byte_end":169859,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169864,"byte_end":169931,"line_start":580,"line_end":580,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":169936,"byte_end":170003,"line_start":581,"line_end":581,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170008,"byte_end":170027,"line_start":582,"line_end":582,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170032,"byte_end":170035,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170040,"byte_end":170054,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170059,"byte_end":170062,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170067,"byte_end":170074,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170079,"byte_end":170106,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170111,"byte_end":170114,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170119,"byte_end":170181,"line_start":589,"line_end":589,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170186,"byte_end":170224,"line_start":590,"line_end":590,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170229,"byte_end":170263,"line_start":591,"line_end":591,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170268,"byte_end":170275,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170280,"byte_end":170283,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170288,"byte_end":170347,"line_start":594,"line_end":594,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170352,"byte_end":170416,"line_start":595,"line_end":595,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170421,"byte_end":170430,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171146,"byte_end":171157,"line_start":622,"line_end":622,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"pub fn is_disjoint(&Self, &HashSet<T, S>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170614,"byte_end":170682,"line_start":605,"line_end":605,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170687,"byte_end":170748,"line_start":606,"line_end":606,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170753,"byte_end":170756,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170761,"byte_end":170775,"line_start":608,"line_end":608,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170780,"byte_end":170783,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170788,"byte_end":170795,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170800,"byte_end":170827,"line_start":611,"line_end":611,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170832,"byte_end":170835,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170840,"byte_end":170900,"line_start":613,"line_end":613,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170905,"byte_end":170936,"line_start":614,"line_end":614,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170941,"byte_end":170944,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170949,"byte_end":170989,"line_start":616,"line_end":616,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":170994,"byte_end":171010,"line_start":617,"line_end":617,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171015,"byte_end":171055,"line_start":618,"line_end":618,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171060,"byte_end":171076,"line_start":619,"line_end":619,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171081,"byte_end":171122,"line_start":620,"line_end":620,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171127,"byte_end":171134,"line_start":621,"line_end":621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171788,"byte_end":171797,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"pub fn is_subset(&Self, &HashSet<T, S>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171257,"byte_end":171310,"line_start":626,"line_end":626,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171315,"byte_end":171376,"line_start":627,"line_end":627,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171381,"byte_end":171384,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171389,"byte_end":171403,"line_start":629,"line_end":629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171408,"byte_end":171411,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171416,"byte_end":171423,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171428,"byte_end":171455,"line_start":632,"line_end":632,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171460,"byte_end":171463,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171468,"byte_end":171530,"line_start":634,"line_end":634,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171535,"byte_end":171568,"line_start":635,"line_end":635,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171573,"byte_end":171576,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171581,"byte_end":171623,"line_start":637,"line_end":637,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171628,"byte_end":171646,"line_start":638,"line_end":638,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171651,"byte_end":171693,"line_start":639,"line_end":639,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171698,"byte_end":171716,"line_start":640,"line_end":640,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171721,"byte_end":171764,"line_start":641,"line_end":641,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171769,"byte_end":171776,"line_start":642,"line_end":642,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172486,"byte_end":172497,"line_start":668,"line_end":668,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"pub fn is_superset(&Self, &HashSet<T, S>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171896,"byte_end":171951,"line_start":647,"line_end":647,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":171956,"byte_end":172017,"line_start":648,"line_end":648,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172022,"byte_end":172025,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172030,"byte_end":172044,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172049,"byte_end":172052,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172057,"byte_end":172064,"line_start":652,"line_end":652,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172069,"byte_end":172096,"line_start":653,"line_end":653,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172101,"byte_end":172104,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172109,"byte_end":172168,"line_start":655,"line_end":655,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172173,"byte_end":172206,"line_start":656,"line_end":656,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172211,"byte_end":172214,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172219,"byte_end":172264,"line_start":658,"line_end":658,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172269,"byte_end":172272,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172277,"byte_end":172295,"line_start":660,"line_end":660,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172300,"byte_end":172318,"line_start":661,"line_end":661,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172323,"byte_end":172368,"line_start":662,"line_end":662,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172373,"byte_end":172376,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172381,"byte_end":172399,"line_start":664,"line_end":664,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172404,"byte_end":172448,"line_start":665,"line_end":665,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172453,"byte_end":172460,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172465,"byte_end":172474,"line_start":667,"line_end":667,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173052,"byte_end":173058,"line_start":690,"line_end":690,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172579,"byte_end":172607,"line_start":672,"line_end":672,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172612,"byte_end":172615,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172620,"byte_end":172687,"line_start":674,"line_end":674,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172692,"byte_end":172695,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172700,"byte_end":172764,"line_start":676,"line_end":676,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172769,"byte_end":172772,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172777,"byte_end":172791,"line_start":678,"line_end":678,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172796,"byte_end":172799,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172804,"byte_end":172811,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172816,"byte_end":172843,"line_start":681,"line_end":681,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172848,"byte_end":172851,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172856,"byte_end":172889,"line_start":683,"line_end":683,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172894,"byte_end":172897,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172902,"byte_end":172938,"line_start":685,"line_end":685,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172943,"byte_end":172980,"line_start":686,"line_end":686,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":172985,"byte_end":173014,"line_start":687,"line_end":687,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173019,"byte_end":173026,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173031,"byte_end":173040,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173658,"byte_end":173665,"line_start":710,"line_end":710,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173146,"byte_end":173239,"line_start":694,"line_end":694,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173244,"byte_end":173280,"line_start":695,"line_end":695,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173285,"byte_end":173288,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173293,"byte_end":173307,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173312,"byte_end":173315,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173320,"byte_end":173327,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173332,"byte_end":173359,"line_start":700,"line_end":700,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173364,"byte_end":173367,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173372,"byte_end":173405,"line_start":702,"line_end":702,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173410,"byte_end":173444,"line_start":703,"line_end":703,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173449,"byte_end":173452,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173457,"byte_end":173513,"line_start":705,"line_end":705,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173518,"byte_end":173558,"line_start":706,"line_end":706,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173563,"byte_end":173620,"line_start":707,"line_end":707,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173625,"byte_end":173632,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173637,"byte_end":173646,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174640,"byte_end":174646,"line_start":742,"line_end":742,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns `true` if the value was","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":173951,"byte_end":174016,"line_start":720,"line_end":720,"column_start":5,"column_end":70}},{"value":"/ present in the set.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174021,"byte_end":174044,"line_start":721,"line_end":721,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174049,"byte_end":174052,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174057,"byte_end":174124,"line_start":723,"line_end":723,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174129,"byte_end":174196,"line_start":724,"line_end":724,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174201,"byte_end":174220,"line_start":725,"line_end":725,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174225,"byte_end":174228,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174233,"byte_end":174247,"line_start":727,"line_end":727,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174252,"byte_end":174255,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174260,"byte_end":174267,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174272,"byte_end":174299,"line_start":730,"line_end":730,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174304,"byte_end":174307,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174312,"byte_end":174345,"line_start":732,"line_end":732,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174350,"byte_end":174353,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174358,"byte_end":174376,"line_start":734,"line_end":734,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174381,"byte_end":174418,"line_start":735,"line_end":735,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174423,"byte_end":174461,"line_start":736,"line_end":736,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174466,"byte_end":174473,"line_start":737,"line_end":737,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174478,"byte_end":174481,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174486,"byte_end":174545,"line_start":739,"line_end":739,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174550,"byte_end":174614,"line_start":740,"line_end":740,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174619,"byte_end":174628,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175481,"byte_end":175485,"line_start":769,"line_end":769,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174800,"byte_end":174885,"line_start":750,"line_end":750,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174890,"byte_end":174893,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174898,"byte_end":174965,"line_start":752,"line_end":752,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":174970,"byte_end":175037,"line_start":753,"line_end":753,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175042,"byte_end":175061,"line_start":754,"line_end":754,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175066,"byte_end":175069,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175074,"byte_end":175088,"line_start":756,"line_end":756,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175093,"byte_end":175096,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175101,"byte_end":175108,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175113,"byte_end":175140,"line_start":759,"line_end":759,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175145,"byte_end":175148,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175153,"byte_end":175219,"line_start":761,"line_end":761,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175224,"byte_end":175262,"line_start":762,"line_end":762,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175267,"byte_end":175302,"line_start":763,"line_end":763,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175307,"byte_end":175314,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175319,"byte_end":175322,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175327,"byte_end":175386,"line_start":766,"line_end":766,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175391,"byte_end":175455,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175460,"byte_end":175469,"line_start":768,"line_end":768,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176084,"byte_end":176090,"line_start":791,"line_end":791,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175656,"byte_end":175713,"line_start":777,"line_end":777,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175718,"byte_end":175721,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175726,"byte_end":175804,"line_start":779,"line_end":779,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175809,"byte_end":175812,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175817,"byte_end":175831,"line_start":781,"line_end":781,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175836,"byte_end":175839,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175844,"byte_end":175851,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175856,"byte_end":175883,"line_start":784,"line_end":784,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175888,"byte_end":175891,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175896,"byte_end":175923,"line_start":786,"line_end":786,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175928,"byte_end":175989,"line_start":787,"line_end":787,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":175994,"byte_end":176026,"line_start":788,"line_end":788,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176031,"byte_end":176060,"line_start":789,"line_end":789,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176065,"byte_end":176072,"line_start":790,"line_end":790,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1079},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181408,"byte_end":181412,"line_start":1014,"line_end":1014,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1082}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181155,"byte_end":181201,"line_start":1007,"line_end":1007,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181202,"byte_end":181205,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181206,"byte_end":181273,"line_start":1009,"line_end":1009,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181274,"byte_end":181309,"line_start":1010,"line_end":1010,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181310,"byte_end":181313,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181314,"byte_end":181350,"line_start":1012,"line_end":1012,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181351,"byte_end":181396,"line_start":1013,"line_end":1013,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181781,"byte_end":181789,"line_start":1025,"line_end":1025,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1085}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181456,"byte_end":181509,"line_start":1018,"line_end":1018,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181510,"byte_end":181513,"line_start":1019,"line_end":1019,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`][`HashSet`]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181514,"byte_end":181596,"line_start":1020,"line_end":1020,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181597,"byte_end":181672,"line_start":1021,"line_end":1021,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181673,"byte_end":181676,"line_start":1022,"line_end":1022,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181677,"byte_end":181713,"line_start":1023,"line_end":1023,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181714,"byte_end":181769,"line_start":1024,"line_end":1024,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182094,"byte_end":182099,"line_start":1036,"line_end":1036,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1089}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181830,"byte_end":181884,"line_start":1029,"line_end":1029,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181885,"byte_end":181888,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181889,"byte_end":181957,"line_start":1031,"line_end":1031,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181958,"byte_end":181993,"line_start":1032,"line_end":1032,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181994,"byte_end":181997,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":181998,"byte_end":182034,"line_start":1034,"line_end":1034,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182035,"byte_end":182082,"line_start":1035,"line_end":1035,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1090},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182453,"byte_end":182465,"line_start":1047,"line_end":1047,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1094},{"krate":0,"index":1095}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182149,"byte_end":182222,"line_start":1040,"line_end":1040,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182223,"byte_end":182226,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182227,"byte_end":182302,"line_start":1042,"line_end":1042,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182303,"byte_end":182338,"line_start":1043,"line_end":1043,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182339,"byte_end":182342,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182343,"byte_end":182379,"line_start":1045,"line_end":1045,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182380,"byte_end":182441,"line_start":1046,"line_end":1046,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1096},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182893,"byte_end":182903,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182597,"byte_end":182668,"line_start":1054,"line_end":1054,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182669,"byte_end":182672,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182673,"byte_end":182746,"line_start":1056,"line_end":1056,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182747,"byte_end":182782,"line_start":1057,"line_end":1057,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182783,"byte_end":182786,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182787,"byte_end":182823,"line_start":1059,"line_end":1059,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":182824,"byte_end":182881,"line_start":1060,"line_end":1060,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1102},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183371,"byte_end":183390,"line_start":1075,"line_end":1075,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1106}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183035,"byte_end":183116,"line_start":1068,"line_end":1068,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183117,"byte_end":183120,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183121,"byte_end":183191,"line_start":1070,"line_end":1070,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183192,"byte_end":183240,"line_start":1071,"line_end":1071,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183241,"byte_end":183244,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183245,"byte_end":183281,"line_start":1073,"line_end":1073,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183282,"byte_end":183359,"line_start":1074,"line_end":1074,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1107},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183751,"byte_end":183756,"line_start":1086,"line_end":1086,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183475,"byte_end":183541,"line_start":1079,"line_end":1079,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183542,"byte_end":183545,"line_start":1080,"line_end":1080,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183546,"byte_end":183614,"line_start":1081,"line_end":1081,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183615,"byte_end":183650,"line_start":1082,"line_end":1082,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183651,"byte_end":183654,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183655,"byte_end":183691,"line_start":1084,"line_end":1084,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":183692,"byte_end":183739,"line_start":1085,"line_end":1085,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1286},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1257,"byte_end":1265,"line_start":52,"line_end":52,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1287}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"! A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1272,"byte_end":1338,"line_start":53,"line_end":53,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1288},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1719,"byte_end":1727,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"! A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":1734,"byte_end":1800,"line_start":67,"line_end":67,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2465,"byte_end":2481,"line_start":89,"line_end":89,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::CollectionAllocErr::CapacityOverflow","value":"CollectionAllocErr::CapacityOverflow","parent":{"krate":0,"index":1323},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2349,"byte_end":2422,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2427,"byte_end":2460,"line_start":88,"line_end":88,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1326},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2556,"byte_end":2564,"line_start":91,"line_end":91,"column_start":5,"column_end":13},"name":"AllocErr","qualname":"::CollectionAllocErr::AllocErr","value":"CollectionAllocErr::AllocErr","parent":{"krate":0,"index":1323},"children":[],"decl_id":null,"docs":" Error due to the allocator (see the `AllocErr` type's docs).\n","sig":null,"attributes":[{"value":"/ Error due to the allocator (see the `AllocErr` type's docs).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2487,"byte_end":2551,"line_start":90,"line_end":90,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":1323},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2324,"byte_end":2342,"line_start":86,"line_end":86,"column_start":10,"column_end":28},"name":"CollectionAllocErr","qualname":"::CollectionAllocErr","value":"pub enum CollectionAllocErr {\n\n    /// Error due to the computed capacity exceeding the collection's maximum\n    /// (usually `isize::MAX` bytes).\n    CapacityOverflow,\n\n    /// Error due to the allocator (see the `AllocErr` type's docs).\n    AllocErr,\n}","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1326}],"decl_id":null,"docs":" Augments `AllocErr` with a CapacityOverflow variant.\n","sig":null,"attributes":[{"value":"/ Augments `AllocErr` with a CapacityOverflow variant.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/lib.rs","byte_start":2219,"byte_end":2275,"line_start":84,"line_end":84,"column_start":1,"column_end":57}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3908,"byte_end":3916,"line_start":33,"line_end":33,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":4007,"byte_end":4015,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":4171,"byte_end":4179,"line_start":47,"line_end":47,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12975,"byte_end":12982,"line_start":202,"line_end":202,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14013,"byte_end":14020,"line_start":236,"line_end":236,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34848,"byte_end":34855,"line_start":957,"line_end":957,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37779,"byte_end":37786,"line_start":1020,"line_end":1020,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38119,"byte_end":38126,"line_start":1036,"line_end":1036,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38220,"byte_end":38227,"line_start":1044,"line_end":1044,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38451,"byte_end":38458,"line_start":1055,"line_end":1055,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38767,"byte_end":38774,"line_start":1067,"line_end":1067,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39601,"byte_end":39605,"line_start":1099,"line_end":1099,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39823,"byte_end":39827,"line_start":1109,"line_end":1109,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40393,"byte_end":40400,"line_start":1128,"line_end":1128,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41037,"byte_end":41045,"line_start":1150,"line_end":1150,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41674,"byte_end":41678,"line_start":1173,"line_end":1173,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41855,"byte_end":41859,"line_start":1182,"line_end":1182,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42391,"byte_end":42397,"line_start":1200,"line_end":1200,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42578,"byte_end":42584,"line_start":1209,"line_end":1209,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43073,"byte_end":43078,"line_start":1226,"line_end":1226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45357,"byte_end":45375,"line_start":1300,"line_end":1300,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46900,"byte_end":46915,"line_start":1354,"line_end":1354,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48162,"byte_end":48173,"line_start":1404,"line_end":1404,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51178,"byte_end":51197,"line_start":1505,"line_end":1505,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53927,"byte_end":53944,"line_start":1600,"line_end":1600,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54984,"byte_end":55002,"line_start":1633,"line_end":1633,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55179,"byte_end":55190,"line_start":1639,"line_end":1639,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55521,"byte_end":55540,"line_start":1648,"line_end":1648,"column_start":40,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55795,"byte_end":55812,"line_start":1657,"line_end":1657,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55977,"byte_end":55992,"line_start":1663,"line_end":1663,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56619,"byte_end":56624,"line_start":1683,"line_end":1683,"column_start":69,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57179,"byte_end":57192,"line_start":1702,"line_end":1702,"column_start":35,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57289,"byte_end":57302,"line_start":1709,"line_end":1709,"column_start":35,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57418,"byte_end":57431,"line_start":1717,"line_end":1717,"column_start":53,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57948,"byte_end":57959,"line_start":1736,"line_end":1736,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":58670,"byte_end":58677,"line_start":1770,"line_end":1770,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59465,"byte_end":59469,"line_start":1803,"line_end":1803,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59839,"byte_end":59843,"line_start":1818,"line_end":1818,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59966,"byte_end":59970,"line_start":1825,"line_end":1825,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60013,"byte_end":60020,"line_start":1827,"line_end":1827,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60402,"byte_end":60409,"line_start":1842,"line_end":1842,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60531,"byte_end":60538,"line_start":1848,"line_end":1848,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60583,"byte_end":60590,"line_start":1850,"line_end":1850,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60792,"byte_end":60800,"line_start":1860,"line_end":1860,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61061,"byte_end":61069,"line_start":1872,"line_end":1872,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61183,"byte_end":61191,"line_start":1878,"line_end":1878,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61242,"byte_end":61250,"line_start":1880,"line_end":1880,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61408,"byte_end":61412,"line_start":1886,"line_end":1886,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61697,"byte_end":61701,"line_start":1898,"line_end":1898,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61823,"byte_end":61827,"line_start":1904,"line_end":1904,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61870,"byte_end":61876,"line_start":1906,"line_end":1906,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62161,"byte_end":62167,"line_start":1918,"line_end":1918,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62289,"byte_end":62295,"line_start":1924,"line_end":1924,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62338,"byte_end":62347,"line_start":1926,"line_end":1926,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62640,"byte_end":62649,"line_start":1938,"line_end":1938,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62771,"byte_end":62780,"line_start":1944,"line_end":1944,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62825,"byte_end":62834,"line_start":1946,"line_end":1946,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63046,"byte_end":63051,"line_start":1956,"line_end":1956,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63320,"byte_end":63325,"line_start":1968,"line_end":1968,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63447,"byte_end":63452,"line_start":1974,"line_end":1974,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63497,"byte_end":63502,"line_start":1976,"line_end":1976,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63698,"byte_end":63703,"line_start":1986,"line_end":1986,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66595,"byte_end":66600,"line_start":2095,"line_end":2095,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67342,"byte_end":67355,"line_start":2124,"line_end":2124,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74018,"byte_end":74029,"line_start":2354,"line_end":2354,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75703,"byte_end":75710,"line_start":2420,"line_end":2420,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":76127,"byte_end":76134,"line_start":2436,"line_end":2436,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":76875,"byte_end":76882,"line_start":2460,"line_end":2460,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/sse2.rs","byte_start":146045,"byte_end":146050,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":149914,"byte_end":149921,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":152026,"byte_end":152033,"line_start":83,"line_end":83,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":152321,"byte_end":152332,"line_start":97,"line_end":97,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":106664,"byte_end":106675,"line_start":71,"line_end":71,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":108789,"byte_end":108797,"line_start":141,"line_end":141,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112085,"byte_end":112091,"line_start":239,"line_end":239,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112117,"byte_end":112123,"line_start":241,"line_end":241,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112223,"byte_end":112229,"line_start":248,"line_end":248,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":113059,"byte_end":113067,"line_start":286,"line_end":286,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134710,"byte_end":134718,"line_start":834,"line_end":834,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134763,"byte_end":134771,"line_start":835,"line_end":835,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134818,"byte_end":134826,"line_start":837,"line_end":837,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":137288,"byte_end":137296,"line_start":906,"line_end":906,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":137659,"byte_end":137667,"line_start":922,"line_end":922,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":138219,"byte_end":138231,"line_start":946,"line_end":946,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":139951,"byte_end":139963,"line_start":995,"line_end":995,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140008,"byte_end":140020,"line_start":996,"line_end":996,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140060,"byte_end":140072,"line_start":998,"line_end":998,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140317,"byte_end":140329,"line_start":1010,"line_end":1010,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141335,"byte_end":141347,"line_start":1042,"line_end":1042,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141525,"byte_end":141532,"line_start":1050,"line_end":1050,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141708,"byte_end":141715,"line_start":1060,"line_end":1060,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142405,"byte_end":142412,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142445,"byte_end":142452,"line_start":1087,"line_end":1087,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142625,"byte_end":142636,"line_start":1095,"line_end":1095,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142754,"byte_end":142765,"line_start":1102,"line_end":1102,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142810,"byte_end":142821,"line_start":1103,"line_end":1103,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142860,"byte_end":142871,"line_start":1105,"line_end":1105,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143325,"byte_end":143336,"line_start":1124,"line_end":1124,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143606,"byte_end":143617,"line_start":1138,"line_end":1138,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143650,"byte_end":143661,"line_start":1139,"line_end":1139,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143983,"byte_end":143991,"line_start":1151,"line_end":1151,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144117,"byte_end":144125,"line_start":1158,"line_end":1158,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144178,"byte_end":144186,"line_start":1159,"line_end":1159,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144233,"byte_end":144241,"line_start":1161,"line_end":1161,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144719,"byte_end":144727,"line_start":1178,"line_end":1178,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":145490,"byte_end":145498,"line_start":1204,"line_end":1204,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":145539,"byte_end":145547,"line_start":1205,"line_end":1205,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156549,"byte_end":156556,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157635,"byte_end":157642,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176233,"byte_end":176240,"line_start":799,"line_end":799,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176497,"byte_end":176504,"line_start":813,"line_end":813,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176586,"byte_end":176593,"line_start":820,"line_end":820,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176810,"byte_end":176817,"line_start":830,"line_end":830,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177102,"byte_end":177109,"line_start":843,"line_end":843,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177341,"byte_end":177348,"line_start":854,"line_end":854,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177574,"byte_end":177581,"line_start":865,"line_end":865,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":184096,"byte_end":184103,"line_start":1104,"line_end":1104,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":184991,"byte_end":184995,"line_start":1140,"line_end":1140,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185151,"byte_end":185155,"line_start":1148,"line_end":1148,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185414,"byte_end":185418,"line_start":1160,"line_end":1160,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185533,"byte_end":185537,"line_start":1166,"line_end":1166,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185588,"byte_end":185592,"line_start":1168,"line_end":1168,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185745,"byte_end":185753,"line_start":1174,"line_end":1174,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186012,"byte_end":186020,"line_start":1186,"line_end":1186,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186127,"byte_end":186135,"line_start":1192,"line_end":1192,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186178,"byte_end":186186,"line_start":1194,"line_end":1194,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186400,"byte_end":186405,"line_start":1201,"line_end":1201,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186672,"byte_end":186677,"line_start":1213,"line_end":1213,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186792,"byte_end":186797,"line_start":1219,"line_end":1219,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186848,"byte_end":186853,"line_start":1221,"line_end":1221,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187071,"byte_end":187083,"line_start":1228,"line_end":1228,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187285,"byte_end":187297,"line_start":1238,"line_end":1238,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187769,"byte_end":187781,"line_start":1262,"line_end":1262,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188006,"byte_end":188018,"line_start":1272,"line_end":1272,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188103,"byte_end":188113,"line_start":1279,"line_end":1279,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188311,"byte_end":188321,"line_start":1289,"line_end":1289,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188797,"byte_end":188807,"line_start":1313,"line_end":1313,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188897,"byte_end":188907,"line_start":1320,"line_end":1320,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189124,"byte_end":189143,"line_start":1330,"line_end":1330,"column_start":26,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189339,"byte_end":189358,"line_start":1339,"line_end":1339,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189664,"byte_end":189683,"line_start":1356,"line_end":1356,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189773,"byte_end":189792,"line_start":1363,"line_end":1363,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190009,"byte_end":190014,"line_start":1373,"line_end":1373,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190187,"byte_end":190192,"line_start":1382,"line_end":1382,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190282,"byte_end":190287,"line_start":1389,"line_end":1389,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190507,"byte_end":190512,"line_start":1399,"line_end":1399,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":3908,"byte_end":3916,"line_start":33,"line_end":33,"column_start":18,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":1,"index":1910}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":4007,"byte_end":4015,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/fx.rs","byte_start":4171,"byte_end":4179,"line_start":47,"line_end":47,"column_start":17,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":19},"to":{"krate":1,"index":6394}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":12975,"byte_end":12982,"line_start":202,"line_end":202,"column_start":23,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":14013,"byte_end":14020,"line_start":236,"line_end":236,"column_start":15,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":34848,"byte_end":34855,"line_start":957,"line_end":957,"column_start":15,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":37779,"byte_end":37786,"line_start":1020,"line_end":1020,"column_start":29,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":1648}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38119,"byte_end":38126,"line_start":1036,"line_end":1036,"column_start":22,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":1653}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38220,"byte_end":38227,"line_start":1044,"line_end":1044,"column_start":25,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38451,"byte_end":38458,"line_start":1055,"line_end":1055,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":1910}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":38767,"byte_end":38774,"line_start":1067,"line_end":1067,"column_start":47,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":2174}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39601,"byte_end":39605,"line_start":1099,"line_end":1099,"column_start":26,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":153},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":39823,"byte_end":39827,"line_start":1109,"line_end":1109,"column_start":45,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":153},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":40393,"byte_end":40400,"line_start":1128,"line_end":1128,"column_start":16,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41037,"byte_end":41045,"line_start":1150,"line_end":1150,"column_start":12,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41674,"byte_end":41678,"line_start":1173,"line_end":1173,"column_start":26,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":41855,"byte_end":41859,"line_start":1182,"line_end":1182,"column_start":38,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42391,"byte_end":42397,"line_start":1200,"line_end":1200,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":203},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":42578,"byte_end":42584,"line_start":1209,"line_end":1209,"column_start":38,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":203},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":43073,"byte_end":43078,"line_start":1226,"line_end":1226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":45357,"byte_end":45375,"line_start":1300,"line_end":1300,"column_start":19,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":46900,"byte_end":46915,"line_start":1354,"line_end":1354,"column_start":19,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":48162,"byte_end":48173,"line_start":1404,"line_end":1404,"column_start":19,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":51178,"byte_end":51197,"line_start":1505,"line_end":1505,"column_start":16,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":53927,"byte_end":53944,"line_start":1600,"line_end":1600,"column_start":19,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":54984,"byte_end":55002,"line_start":1633,"line_end":1633,"column_start":29,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55179,"byte_end":55190,"line_start":1639,"line_end":1639,"column_start":43,"column_end":54},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":239},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55521,"byte_end":55540,"line_start":1648,"line_end":1648,"column_start":40,"column_end":59},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":250},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55795,"byte_end":55812,"line_start":1657,"line_end":1657,"column_start":29,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":55977,"byte_end":55992,"line_start":1663,"line_end":1663,"column_start":29,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":56619,"byte_end":56624,"line_start":1683,"line_end":1683,"column_start":69,"column_end":74},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":366},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57179,"byte_end":57192,"line_start":1702,"line_end":1702,"column_start":35,"column_end":48},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57289,"byte_end":57302,"line_start":1709,"line_end":1709,"column_start":35,"column_end":48},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57418,"byte_end":57431,"line_start":1717,"line_end":1717,"column_start":53,"column_end":66},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":57948,"byte_end":57959,"line_start":1736,"line_end":1736,"column_start":57,"column_end":68},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":407},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":58670,"byte_end":58677,"line_start":1770,"line_end":1770,"column_start":32,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4894}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59465,"byte_end":59469,"line_start":1803,"line_end":1803,"column_start":29,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":153},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59839,"byte_end":59843,"line_start":1818,"line_end":1818,"column_start":38,"column_end":42},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":153},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":59966,"byte_end":59970,"line_start":1825,"line_end":1825,"column_start":34,"column_end":38},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":153},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60013,"byte_end":60020,"line_start":1827,"line_end":1827,"column_start":29,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60402,"byte_end":60409,"line_start":1842,"line_end":1842,"column_start":38,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60531,"byte_end":60538,"line_start":1848,"line_end":1848,"column_start":34,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60583,"byte_end":60590,"line_start":1850,"line_end":1850,"column_start":31,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":169},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":60792,"byte_end":60800,"line_start":1860,"line_end":1860,"column_start":25,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61061,"byte_end":61069,"line_start":1872,"line_end":1872,"column_start":34,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61183,"byte_end":61191,"line_start":1878,"line_end":1878,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61242,"byte_end":61250,"line_start":1880,"line_end":1880,"column_start":41,"column_end":49},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":180},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61408,"byte_end":61412,"line_start":1886,"line_end":1886,"column_start":29,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61697,"byte_end":61701,"line_start":1898,"line_end":1898,"column_start":38,"column_end":42},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61823,"byte_end":61827,"line_start":1904,"line_end":1904,"column_start":34,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":61870,"byte_end":61876,"line_start":1906,"line_end":1906,"column_start":29,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":203},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62161,"byte_end":62167,"line_start":1918,"line_end":1918,"column_start":38,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":203},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62289,"byte_end":62295,"line_start":1924,"line_end":1924,"column_start":34,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":203},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62338,"byte_end":62347,"line_start":1926,"line_end":1926,"column_start":29,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62640,"byte_end":62649,"line_start":1938,"line_end":1938,"column_start":38,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62771,"byte_end":62780,"line_start":1944,"line_end":1944,"column_start":34,"column_end":43},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":62825,"byte_end":62834,"line_start":1946,"line_end":1946,"column_start":31,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63046,"byte_end":63051,"line_start":1956,"line_end":1956,"column_start":29,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63320,"byte_end":63325,"line_start":1968,"line_end":1968,"column_start":38,"column_end":43},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63447,"byte_end":63452,"line_start":1974,"line_end":1974,"column_start":34,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63497,"byte_end":63502,"line_start":1976,"line_end":1976,"column_start":31,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":63698,"byte_end":63703,"line_start":1986,"line_end":1986,"column_start":19,"column_end":24},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":66595,"byte_end":66600,"line_start":2095,"line_end":2095,"column_start":28,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":67342,"byte_end":67355,"line_start":2124,"line_end":2124,"column_start":19,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":74018,"byte_end":74029,"line_start":2354,"line_end":2354,"column_start":27,"column_end":38},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":75703,"byte_end":75710,"line_start":2420,"line_end":2420,"column_start":40,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4890}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":76127,"byte_end":76134,"line_start":2436,"line_end":2436,"column_start":34,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4903}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/map.rs","byte_start":76875,"byte_end":76882,"line_start":2460,"line_end":2460,"column_start":46,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4903}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/sse2.rs","byte_start":146045,"byte_end":146050,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":149914,"byte_end":149921,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":152026,"byte_end":152033,"line_start":83,"line_end":83,"column_start":23,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1309},"to":{"krate":1,"index":4894}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/bitmask.rs","byte_start":152321,"byte_end":152332,"line_start":97,"line_end":97,"column_start":19,"column_end":30},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":106664,"byte_end":106675,"line_start":71,"line_end":71,"column_start":6,"column_end":17},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":108789,"byte_end":108797,"line_start":141,"line_end":141,"column_start":19,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":749},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112085,"byte_end":112091,"line_start":239,"line_end":239,"column_start":25,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112117,"byte_end":112123,"line_start":241,"line_end":241,"column_start":19,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":112223,"byte_end":112229,"line_start":248,"line_end":248,"column_start":9,"column_end":15},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":113059,"byte_end":113067,"line_start":286,"line_end":286,"column_start":9,"column_end":17},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134710,"byte_end":134718,"line_start":834,"line_end":834,"column_start":25,"column_end":33},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":778},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134763,"byte_end":134771,"line_start":835,"line_end":835,"column_start":25,"column_end":33},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":778},"to":{"krate":1,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":134818,"byte_end":134826,"line_start":837,"line_end":837,"column_start":26,"column_end":34},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":778},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":137288,"byte_end":137296,"line_start":906,"line_end":906,"column_start":18,"column_end":26},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":778},"to":{"krate":1,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":137659,"byte_end":137667,"line_start":922,"line_end":922,"column_start":26,"column_end":34},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":778},"to":{"krate":1,"index":4894}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":138219,"byte_end":138231,"line_start":946,"line_end":946,"column_start":9,"column_end":21},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":139951,"byte_end":139963,"line_start":995,"line_end":995,"column_start":25,"column_end":37},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140008,"byte_end":140020,"line_start":996,"line_end":996,"column_start":25,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140060,"byte_end":140072,"line_start":998,"line_end":998,"column_start":19,"column_end":31},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":140317,"byte_end":140329,"line_start":1010,"line_end":1010,"column_start":22,"column_end":34},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141335,"byte_end":141347,"line_start":1042,"line_end":1042,"column_start":27,"column_end":39},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141525,"byte_end":141532,"line_start":1050,"line_end":1050,"column_start":19,"column_end":26},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":141708,"byte_end":141715,"line_start":1060,"line_end":1060,"column_start":22,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142405,"byte_end":142412,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142445,"byte_end":142452,"line_start":1087,"line_end":1087,"column_start":27,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142625,"byte_end":142636,"line_start":1095,"line_end":1095,"column_start":13,"column_end":24},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142754,"byte_end":142765,"line_start":1102,"line_end":1102,"column_start":25,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142810,"byte_end":142821,"line_start":1103,"line_end":1103,"column_start":25,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":142860,"byte_end":142871,"line_start":1105,"line_end":1105,"column_start":18,"column_end":29},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143325,"byte_end":143336,"line_start":1124,"line_end":1124,"column_start":22,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143606,"byte_end":143617,"line_start":1138,"line_end":1138,"column_start":31,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143650,"byte_end":143661,"line_start":1139,"line_end":1139,"column_start":27,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":143983,"byte_end":143991,"line_start":1151,"line_end":1151,"column_start":13,"column_end":21},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144117,"byte_end":144125,"line_start":1158,"line_end":1158,"column_start":29,"column_end":37},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144178,"byte_end":144186,"line_start":1159,"line_end":1159,"column_start":29,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144233,"byte_end":144241,"line_start":1161,"line_end":1161,"column_start":22,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":144719,"byte_end":144727,"line_start":1178,"line_end":1178,"column_start":26,"column_end":34},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":145490,"byte_end":145498,"line_start":1204,"line_end":1204,"column_start":35,"column_end":43},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/raw/mod.rs","byte_start":145539,"byte_end":145547,"line_start":1205,"line_end":1205,"column_start":31,"column_end":39},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":156549,"byte_end":156556,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":157635,"byte_end":157642,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176233,"byte_end":176240,"line_start":799,"line_end":799,"column_start":26,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":1648}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176497,"byte_end":176504,"line_start":813,"line_end":813,"column_start":19,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":1653}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176586,"byte_end":176593,"line_start":820,"line_end":820,"column_start":27,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":176810,"byte_end":176817,"line_start":830,"line_end":830,"column_start":32,"column_end":39},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":4890}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177102,"byte_end":177109,"line_start":843,"line_end":843,"column_start":26,"column_end":33},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":4903}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177341,"byte_end":177348,"line_start":854,"line_end":854,"column_start":34,"column_end":41},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":4903}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":177574,"byte_end":177581,"line_start":865,"line_end":865,"column_start":24,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":1910}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":184096,"byte_end":184103,"line_start":1104,"line_end":1104,"column_start":29,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":4894}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":184991,"byte_end":184995,"line_start":1140,"line_end":1140,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1079},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185151,"byte_end":185155,"line_start":1148,"line_end":1148,"column_start":26,"column_end":30},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1079},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185414,"byte_end":185418,"line_start":1160,"line_end":1160,"column_start":35,"column_end":39},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1079},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185533,"byte_end":185537,"line_start":1166,"line_end":1166,"column_start":31,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1079},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185588,"byte_end":185592,"line_start":1168,"line_end":1168,"column_start":40,"column_end":44},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1079},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":185745,"byte_end":185753,"line_start":1174,"line_end":1174,"column_start":22,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186012,"byte_end":186020,"line_start":1186,"line_end":1186,"column_start":31,"column_end":39},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186127,"byte_end":186135,"line_start":1192,"line_end":1192,"column_start":27,"column_end":35},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186178,"byte_end":186186,"line_start":1194,"line_end":1194,"column_start":36,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186400,"byte_end":186405,"line_start":1201,"line_end":1201,"column_start":26,"column_end":31},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186672,"byte_end":186677,"line_start":1213,"line_end":1213,"column_start":35,"column_end":40},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":4939}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186792,"byte_end":186797,"line_start":1219,"line_end":1219,"column_start":31,"column_end":36},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":186848,"byte_end":186853,"line_start":1221,"line_end":1221,"column_start":40,"column_end":45},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187071,"byte_end":187083,"line_start":1228,"line_end":1228,"column_start":26,"column_end":38},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187285,"byte_end":187297,"line_start":1238,"line_end":1238,"column_start":29,"column_end":41},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":187769,"byte_end":187781,"line_start":1262,"line_end":1262,"column_start":31,"column_end":43},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188006,"byte_end":188018,"line_start":1272,"line_end":1272,"column_start":34,"column_end":46},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188103,"byte_end":188113,"line_start":1279,"line_end":1279,"column_start":26,"column_end":36},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1096},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188311,"byte_end":188321,"line_start":1289,"line_end":1289,"column_start":29,"column_end":39},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1096},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188797,"byte_end":188807,"line_start":1313,"line_end":1313,"column_start":34,"column_end":44},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1096},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":188897,"byte_end":188907,"line_start":1320,"line_end":1320,"column_start":31,"column_end":41},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1096},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189124,"byte_end":189143,"line_start":1330,"line_end":1330,"column_start":26,"column_end":45},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1102},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189339,"byte_end":189358,"line_start":1339,"line_end":1339,"column_start":29,"column_end":48},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1102},"to":{"krate":1,"index":4984}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189664,"byte_end":189683,"line_start":1356,"line_end":1356,"column_start":34,"column_end":53},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1102},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":189773,"byte_end":189792,"line_start":1363,"line_end":1363,"column_start":31,"column_end":50},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1102},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190009,"byte_end":190014,"line_start":1373,"line_end":1373,"column_start":26,"column_end":31},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1107},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190187,"byte_end":190192,"line_start":1382,"line_end":1382,"column_start":34,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1107},"to":{"krate":1,"index":5244}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190282,"byte_end":190287,"line_start":1389,"line_end":1389,"column_start":31,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1107},"to":{"krate":1,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.1.8/src/set.rs","byte_start":190507,"byte_end":190512,"line_start":1399,"line_end":1399,"column_start":29,"column_end":34},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1107},"to":{"krate":1,"index":4984}}]}