{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19","program":"/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_channel","--edition=2018","/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=5252fdef0774a4e8","-C","extra-filename=-5252fdef0774a4e8","--out-dir","/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","-L","dependency=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","--extern","futures_core=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libfutures_core-21dad576f1faf786.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu"],"output":"/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libfutures_channel-5252fdef0774a4e8.rmeta"},"prelude":{"crate_id":{"name":"futures_channel","disambiguator":[15175586911341779233,14555115685030592685]},"crate_root":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src","external_crates":[{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","num":15,"id":{"name":"futures_core","disambiguator":[10438555113138517946,4178421672829186342]}}],"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":45,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":45,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":34},{"krate":0,"index":217}],"decl_id":null,"docs":" Asynchronous channels.","sig":null,"attributes":[{"value":"! Asynchronous channels.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":26,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":27,"byte_end":30,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate provides channels that can be used to communicate between","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":31,"byte_end":103,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":104,"byte_end":127,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":128,"byte_end":131,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! All items of this library are only available when the `std` or `alloc` feature of this","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":132,"byte_end":222,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! library is activated, and it is activated by default.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":223,"byte_end":280,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":407,"byte_end":495,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":663,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::mpsc","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":460},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":289},{"krate":0,"index":294},{"krate":0,"index":84},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":308},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":88},{"krate":0,"index":324},{"krate":0,"index":335},{"krate":0,"index":333},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":337},{"krate":0,"index":352},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":355},{"krate":0,"index":368},{"krate":0,"index":366},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":370},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":387},{"krate":0,"index":385},{"krate":0,"index":384},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":144},{"krate":0,"index":154},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216}],"decl_id":null,"docs":" A multi-producer, single-consumer queue for sending values across\n asynchronous tasks.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1468,"byte_end":1491,"line_start":41,"line_end":41,"column_start":5,"column_end":28}},{"value":"! A multi-producer, single-consumer queue for sending values across","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463123,"byte_end":6463192,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463193,"byte_end":6463216,"line_start":2,"line_end":2,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463217,"byte_end":6463220,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! Similarly to the `std`, channel creation provides [`Receiver`] and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463221,"byte_end":6463291,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! [`Sender`] handles. [`Receiver`] implements [`Stream`] and allows a task to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463292,"byte_end":6463371,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! read values out of the channel. If there is no message to read from the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463372,"byte_end":6463447,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"! channel, the current task will be notified when a new value is sent.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463448,"byte_end":6463520,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! [`Sender`] implements the `Sink` trait and allows a task to send messages into","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463521,"byte_end":6463603,"line_start":8,"line_end":8,"column_start":1,"column_end":83}},{"value":"! the channel. If the channel is at capacity, the send will be rejected and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463604,"byte_end":6463681,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! the task will be notified when additional capacity is available. In other","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463682,"byte_end":6463759,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"! words, the channel provides backpressure.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463760,"byte_end":6463805,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463806,"byte_end":6463809,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Unbounded channels are also available using the `unbounded` constructor.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463810,"byte_end":6463886,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463887,"byte_end":6463890,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Disconnection","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463891,"byte_end":6463910,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463911,"byte_end":6463914,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! When all [`Sender`] handles have been dropped, it is no longer","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463915,"byte_end":6463981,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"! possible to send values into the channel. This is considered the termination","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6463982,"byte_end":6464062,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"! event of the stream. As such, [`Receiver::poll_next`]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464063,"byte_end":6464120,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"! will return `Ok(Ready(None))`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464121,"byte_end":6464155,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464156,"byte_end":6464159,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] handle is dropped, then messages can no longer","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464160,"byte_end":6464230,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"! be read out of the channel. In this case, all further attempts to send will","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464231,"byte_end":6464310,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"! result in an error.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464311,"byte_end":6464334,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464335,"byte_end":6464338,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! # Clean Shutdown","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464339,"byte_end":6464359,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464360,"byte_end":6464363,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] is simply dropped, then it is possible for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464364,"byte_end":6464430,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"! there to be messages still in the channel that will not be processed. As","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464431,"byte_end":6464507,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"! such, it is usually desirable to perform a \"clean\" shutdown. To do this, the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464508,"byte_end":6464588,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"! receiver will first call `close`, which will prevent any further messages to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464589,"byte_end":6464669,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"! be sent into the channel. Then, the receiver consumes the channel to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464670,"byte_end":6464742,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"! completion, at which point the receiver can be dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464743,"byte_end":6464802,"line_start":33,"line_end":33,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464803,"byte_end":6464806,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! [`Sender`]: struct.Sender.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464807,"byte_end":6464841,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"! [`Receiver`]: struct.Receiver.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464842,"byte_end":6464880,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"! [`Stream`]: ../../futures_core/stream/trait.Stream.html","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464881,"byte_end":6464940,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"! [`Receiver::poll_next`]:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464941,"byte_end":6464969,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"!     ../../futures_core/stream/trait.Stream.html#tymethod.poll_next","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6464970,"byte_end":6465040,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":297},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468197,"byte_end":6468203,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Sender","qualname":"::mpsc::Sender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of a bounded mpsc channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468049,"byte_end":6468100,"line_start":114,"line_end":114,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468101,"byte_end":6468104,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468105,"byte_end":6468168,"line_start":116,"line_end":116,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468388,"byte_end":6468403,"line_start":124,"line_end":124,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::mpsc::UnboundedSender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of an unbounded mpsc channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468233,"byte_end":6468287,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468288,"byte_end":6468291,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468292,"byte_end":6468359,"line_start":122,"line_end":122,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":311},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468666,"byte_end":6468674,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::mpsc::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":313}],"decl_id":null,"docs":" The receiving end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of a bounded mpsc channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468521,"byte_end":6468569,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468570,"byte_end":6468573,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468574,"byte_end":6468637,"line_start":131,"line_end":131,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":317},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468869,"byte_end":6468886,"line_start":141,"line_end":141,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::mpsc::UnboundedReceiver","value":"","parent":null,"children":[],"decl_id":null,"docs":" The receiving end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of an unbounded mpsc channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468717,"byte_end":6468768,"line_start":137,"line_end":137,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468769,"byte_end":6468772,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468773,"byte_end":6468840,"line_start":139,"line_end":139,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469130,"byte_end":6469139,"line_start":148,"line_end":148,"column_start":12,"column_end":21},"name":"SendError","qualname":"::mpsc::SendError","value":"SendError {  }","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":" The error type for [`Sender`s](Sender) used as `Sink`s.\n","sig":null,"attributes":[{"value":"/ The error type for [`Sender`s](Sender) used as `Sink`s.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469020,"byte_end":6469079,"line_start":146,"line_end":146,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":337},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469278,"byte_end":6469290,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"TrySendError","qualname":"::mpsc::TrySendError","value":"TrySendError {  }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"decl_id":null,"docs":" The error type returned from [`try_send`](Sender::try_send).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_send`](Sender::try_send).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469170,"byte_end":6469234,"line_start":152,"line_end":152,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469500,"byte_end":6469512,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"TryRecvError","qualname":"::mpsc::TryRecvError","value":"TryRecvError {  }","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" The error type returned from [`try_next`](Receiver::try_next).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_next`](Receiver::try_next).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469422,"byte_end":6469488,"line_start":165,"line_end":165,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469960,"byte_end":6469967,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SendError>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the channel being full.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469879,"byte_end":6469948,"line_start":183,"line_end":183,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470182,"byte_end":6470197,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<SendError>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the receiver being dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470097,"byte_end":6470170,"line_start":191,"line_end":191,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471020,"byte_end":6471027,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"is_full","qualname":"<TrySendError<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the channel being full.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470939,"byte_end":6471008,"line_start":221,"line_end":221,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471168,"byte_end":6471183,"line_start":227,"line_end":227,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<TrySendError<T>>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the receiver being dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471083,"byte_end":6471156,"line_start":226,"line_end":226,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471324,"byte_end":6471334,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[{"value":"/ Returns the message that was attempted to be sent but failed.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471247,"byte_end":6471312,"line_start":231,"line_end":231,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471442,"byte_end":6471457,"line_start":237,"line_end":237,"column_start":12,"column_end":27},"name":"into_send_error","qualname":"<TrySendError<T>>::into_send_error","value":"pub fn into_send_error(Self) -> SendError","parent":null,"children":[],"decl_id":null,"docs":" Drops the message and converts into a `SendError`.\n","sig":null,"attributes":[{"value":"/ Drops the message and converts into a `SendError`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471376,"byte_end":6471430,"line_start":236,"line_end":236,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474416,"byte_end":6474423,"line_start":338,"line_end":338,"column_start":8,"column_end":15},"name":"channel","qualname":"::mpsc::channel","value":"pub fn channel<T>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a bounded mpsc channel for communicating between asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a bounded mpsc channel for communicating between asynchronous tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473790,"byte_end":6473870,"line_start":327,"line_end":327,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473871,"byte_end":6473874,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ Being bounded, this channel provides backpressure to ensure that the sender","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473875,"byte_end":6473954,"line_start":329,"line_end":329,"column_start":1,"column_end":80}},{"value":"/ outpaces the receiver by only a limited amount. The channel's capacity is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473955,"byte_end":6474032,"line_start":330,"line_end":330,"column_start":1,"column_end":78}},{"value":"/ equal to `buffer + num-senders`. In other words, each sender gets a","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474033,"byte_end":6474104,"line_start":331,"line_end":331,"column_start":1,"column_end":72}},{"value":"/ guaranteed slot in the channel capacity, and on top of that there are","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474105,"byte_end":6474178,"line_start":332,"line_end":332,"column_start":1,"column_end":74}},{"value":"/ `buffer` \"first come, first serve\" slots available to all senders.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474179,"byte_end":6474249,"line_start":333,"line_end":333,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474250,"byte_end":6474253,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ The [`Receiver`](Receiver) returned implements the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474254,"byte_end":6474308,"line_start":335,"line_end":335,"column_start":1,"column_end":55}},{"value":"/ [`Stream`](futures_core::stream::Stream) trait, while [`Sender`](Sender) implements","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474309,"byte_end":6474396,"line_start":336,"line_end":336,"column_start":1,"column_end":88}},{"value":"/ `Sink`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474397,"byte_end":6474408,"line_start":337,"line_end":337,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6475242,"byte_end":6475251,"line_start":356,"line_end":356,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::mpsc::unbounded","value":"pub fn unbounded<T>() -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded mpsc channel for communicating between asynchronous\n tasks.","sig":null,"attributes":[{"value":"/ Creates an unbounded mpsc channel for communicating between asynchronous","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474730,"byte_end":6474806,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"/ tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474807,"byte_end":6474817,"line_start":347,"line_end":347,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474818,"byte_end":6474821,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ A `send` on this channel will always succeed as long as the receive half has","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474822,"byte_end":6474902,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ not been closed. If the receiver falls behind, messages will be arbitrarily","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474903,"byte_end":6474982,"line_start":350,"line_end":350,"column_start":1,"column_end":80}},{"value":"/ buffered.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474983,"byte_end":6474996,"line_start":351,"line_end":351,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6474997,"byte_end":6475000,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ **Note** that the amount of available system memory is an implicit bound to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6475001,"byte_end":6475080,"line_start":353,"line_end":353,"column_start":1,"column_end":80}},{"value":"/ the channel. Using an `unbounded` channel has the ability of causing the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6475081,"byte_end":6475157,"line_start":354,"line_end":354,"column_start":1,"column_end":77}},{"value":"/ process to run out of memory. In this case, the process will be aborted.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6475158,"byte_end":6475234,"line_start":355,"line_end":355,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483279,"byte_end":6483287,"line_start":599,"line_end":599,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"pub fn try_send(&mut Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a message on this `Sender`, returning the message\n if there was an error.\n","sig":null,"attributes":[{"value":"/ Attempts to send a message on this `Sender`, returning the message","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483166,"byte_end":6483236,"line_start":597,"line_end":597,"column_start":5,"column_end":75}},{"value":"/ if there was an error.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483241,"byte_end":6483267,"line_start":598,"line_end":598,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483848,"byte_end":6483858,"line_start":617,"line_end":617,"column_start":12,"column_end":22},"name":"start_send","qualname":"<Sender<T>>::start_send","value":"pub fn start_send(&mut Self, T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483632,"byte_end":6483666,"line_start":612,"line_end":612,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483671,"byte_end":6483674,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ This function should only be called after","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483679,"byte_end":6483724,"line_start":614,"line_end":614,"column_start":5,"column_end":50}},{"value":"/ [`poll_ready`](Sender::poll_ready) has reported that the channel is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483729,"byte_end":6483800,"line_start":615,"line_end":615,"column_start":5,"column_end":76}},{"value":"/ ready to receive a message.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483805,"byte_end":6483836,"line_start":616,"line_end":616,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484486,"byte_end":6484496,"line_start":634,"line_end":634,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<Sender<T>>::poll_ready","value":"pub fn poll_ready(&mut Self, &mut Context) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Polls the channel to determine if there is guaranteed capacity to send\n at least one item without waiting.","sig":null,"attributes":[{"value":"/ Polls the channel to determine if there is guaranteed capacity to send","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483975,"byte_end":6484049,"line_start":622,"line_end":622,"column_start":5,"column_end":79}},{"value":"/ at least one item without waiting.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484054,"byte_end":6484092,"line_start":623,"line_end":623,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484097,"byte_end":6484100,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484105,"byte_end":6484123,"line_start":625,"line_end":625,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484128,"byte_end":6484131,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484136,"byte_end":6484160,"line_start":627,"line_end":627,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484165,"byte_end":6484168,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Ok(_))` if there is sufficient capacity;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484173,"byte_end":6484232,"line_start":629,"line_end":629,"column_start":5,"column_end":64}},{"value":"/ - `Poll::Pending` if the channel may not have","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484237,"byte_end":6484286,"line_start":630,"line_end":630,"column_start":5,"column_end":54}},{"value":"/   capacity, in which case the current task is queued to be notified once","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484291,"byte_end":6484367,"line_start":631,"line_end":631,"column_start":5,"column_end":81}},{"value":"/   capacity is available;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484372,"byte_end":6484400,"line_start":632,"line_end":632,"column_start":5,"column_end":33}},{"value":"/ - `Poll::Ready(Err(SendError))` if the receiver has been dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484405,"byte_end":6484474,"line_start":633,"line_end":633,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484821,"byte_end":6484830,"line_start":645,"line_end":645,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484740,"byte_end":6484809,"line_start":644,"line_end":644,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485013,"byte_end":6485026,"line_start":650,"line_end":650,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<Sender<T>>::close_channel","value":"pub fn close_channel(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6484927,"byte_end":6485001,"line_start":649,"line_end":649,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485242,"byte_end":6485252,"line_start":657,"line_end":657,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<Sender<T>>::disconnect","value":"pub fn disconnect(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485139,"byte_end":6485230,"line_start":656,"line_end":656,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485370,"byte_end":6485383,"line_start":662,"line_end":662,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<Sender<T>>::same_receiver","value":"pub fn same_receiver(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485300,"byte_end":6485358,"line_start":661,"line_end":661,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485664,"byte_end":6485674,"line_start":672,"line_end":672,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<UnboundedSender<T>>::poll_ready","value":"pub fn poll_ready(&Self, &mut Context) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Check if the channel is ready to receive a message.\n","sig":null,"attributes":[{"value":"/ Check if the channel is ready to receive a message.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485597,"byte_end":6485652,"line_start":671,"line_end":671,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485995,"byte_end":6486004,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<UnboundedSender<T>>::is_closed","value":"pub fn is_closed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485914,"byte_end":6485983,"line_start":682,"line_end":682,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486187,"byte_end":6486200,"line_start":688,"line_end":688,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<UnboundedSender<T>>::close_channel","value":"pub fn close_channel(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486101,"byte_end":6486175,"line_start":687,"line_end":687,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486408,"byte_end":6486418,"line_start":695,"line_end":695,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<UnboundedSender<T>>::disconnect","value":"pub fn disconnect(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486305,"byte_end":6486396,"line_start":694,"line_end":694,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487135,"byte_end":6487145,"line_start":720,"line_end":720,"column_start":12,"column_end":22},"name":"start_send","qualname":"<UnboundedSender<T>>::start_send","value":"pub fn start_send(&mut Self, T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486940,"byte_end":6486974,"line_start":716,"line_end":716,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486979,"byte_end":6486982,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ This method should only be called after `poll_ready` has been used to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6486987,"byte_end":6487060,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/ verify that the channel is ready to receive a message.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487065,"byte_end":6487123,"line_start":719,"line_end":719,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487510,"byte_end":6487524,"line_start":730,"line_end":730,"column_start":12,"column_end":26},"name":"unbounded_send","qualname":"<UnboundedSender<T>>::unbounded_send","value":"pub fn unbounded_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends a message along this channel.","sig":null,"attributes":[{"value":"/ Sends a message along this channel.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487264,"byte_end":6487303,"line_start":725,"line_end":725,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487308,"byte_end":6487311,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ This is an unbounded sender, so this function differs from `Sink::send`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487316,"byte_end":6487391,"line_start":727,"line_end":727,"column_start":5,"column_end":80}},{"value":"/ by ensuring the return type reflects that the channel is always ready to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487396,"byte_end":6487472,"line_start":728,"line_end":728,"column_start":5,"column_end":81}},{"value":"/ receive messages.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487477,"byte_end":6487498,"line_start":729,"line_end":729,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487683,"byte_end":6487696,"line_start":735,"line_end":735,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<UnboundedSender<T>>::same_receiver","value":"pub fn same_receiver(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487613,"byte_end":6487671,"line_start":734,"line_end":734,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489888,"byte_end":6489893,"line_start":810,"line_end":810,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489651,"byte_end":6489715,"line_start":806,"line_end":806,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489720,"byte_end":6489723,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489728,"byte_end":6489803,"line_start":808,"line_end":808,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489808,"byte_end":6489876,"line_start":809,"line_end":809,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490674,"byte_end":6490682,"line_start":830,"line_end":830,"column_start":12,"column_end":20},"name":"try_next","qualname":"<Receiver<T>>::try_next","value":"pub fn try_next(&mut Self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490288,"byte_end":6490363,"line_start":822,"line_end":822,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490368,"byte_end":6490371,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490376,"byte_end":6490448,"line_start":824,"line_end":824,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490453,"byte_end":6490527,"line_start":825,"line_end":825,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490532,"byte_end":6490552,"line_start":826,"line_end":826,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490557,"byte_end":6490560,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490565,"byte_end":6490639,"line_start":828,"line_end":828,"column_start":5,"column_end":79}},{"value":"/ returned None.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6490644,"byte_end":6490662,"line_start":829,"line_end":829,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494717,"byte_end":6494722,"line_start":946,"line_end":946,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of the channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of the channel, without dropping it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494478,"byte_end":6494544,"line_start":942,"line_end":942,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494549,"byte_end":6494552,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494557,"byte_end":6494632,"line_start":944,"line_end":944,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494637,"byte_end":6494705,"line_start":945,"line_end":945,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495157,"byte_end":6495165,"line_start":958,"line_end":958,"column_start":12,"column_end":20},"name":"try_next","qualname":"<UnboundedReceiver<T>>::try_next","value":"pub fn try_next(&mut Self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494771,"byte_end":6494846,"line_start":950,"line_end":950,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494851,"byte_end":6494854,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494859,"byte_end":6494931,"line_start":952,"line_end":952,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494936,"byte_end":6495010,"line_start":953,"line_end":953,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495015,"byte_end":6495035,"line_start":954,"line_end":954,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495040,"byte_end":6495043,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495048,"byte_end":6495122,"line_start":956,"line_end":956,"column_start":5,"column_end":79}},{"value":"/ returned None.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495127,"byte_end":6495145,"line_start":957,"line_end":957,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":217},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::oneshot","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":482},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":406},{"krate":0,"index":412},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":246},{"krate":0,"index":251},{"krate":0,"index":415},{"krate":0,"index":426},{"krate":0,"index":425},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":417},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":261},{"krate":0,"index":265}],"decl_id":null,"docs":" A channel for sending a single message between asynchronous tasks.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1514,"byte_end":1539,"line_start":43,"line_end":43,"column_start":5,"column_end":30}},{"value":"! A channel for sending a single message between asynchronous tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503424,"byte_end":6503494,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503964,"byte_end":6503972,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":396}],"decl_id":null,"docs":" A future for a value that will be provided by another asynchronous task.","sig":null,"attributes":[{"value":"/ A future for a value that will be provided by another asynchronous task.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503738,"byte_end":6503814,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503815,"byte_end":6503818,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503819,"byte_end":6503867,"line_start":15,"line_end":15,"column_start":1,"column_end":49}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6503868,"byte_end":6503935,"line_start":16,"line_end":16,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504148,"byte_end":6504154,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Sender","qualname":"::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":402}],"decl_id":null,"docs":" A means of transmitting a single value to another task.","sig":null,"attributes":[{"value":"/ A means of transmitting a single value to another task.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504007,"byte_end":6504066,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504067,"byte_end":6504070,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504071,"byte_end":6504119,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6507031,"byte_end":6507038,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"channel","qualname":"::oneshot::channel","value":"pub fn channel<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new one-shot channel for sending values across asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a new one-shot channel for sending values across asynchronous tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506055,"byte_end":6506135,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506136,"byte_end":6506139,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This function is similar to Rust's channel constructor found in the standard","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506140,"byte_end":6506220,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ library. Two halves are returned, the first of which is a `Sender` handle,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506221,"byte_end":6506299,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ used to signal the end of a computation and provide its value. The second","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506300,"byte_end":6506377,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ half is a `Receiver` which implements the `Future` trait, resolving to the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506378,"byte_end":6506456,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ value that was given to the `Sender` handle.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506457,"byte_end":6506505,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506506,"byte_end":6506509,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Each half can be separately owned and sent across tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506510,"byte_end":6506570,"line_start":79,"line_end":79,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506571,"byte_end":6506574,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506575,"byte_end":6506589,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506590,"byte_end":6506593,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506594,"byte_end":6506601,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506602,"byte_end":6506636,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506637,"byte_end":6506672,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/ use std::thread;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506673,"byte_end":6506693,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506694,"byte_end":6506697,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let (sender, receiver) = oneshot::channel::<i32>();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506698,"byte_end":6506753,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506754,"byte_end":6506757,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # let t =","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506758,"byte_end":6506771,"line_start":90,"line_end":90,"column_start":1,"column_end":14}},{"value":"/ thread::spawn(|| {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506772,"byte_end":6506794,"line_start":91,"line_end":91,"column_start":1,"column_end":23}},{"value":"/     let future = receiver.map(|i| {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506795,"byte_end":6506834,"line_start":92,"line_end":92,"column_start":1,"column_end":40}},{"value":"/         println!(\"got: {:?}\", i);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506835,"byte_end":6506872,"line_start":93,"line_end":93,"column_start":1,"column_end":38}},{"value":"/     });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506873,"byte_end":6506884,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/     // ...","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506885,"byte_end":6506899,"line_start":95,"line_end":95,"column_start":1,"column_end":15}},{"value":"/ # return future;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506900,"byte_end":6506920,"line_start":96,"line_end":96,"column_start":1,"column_end":21}},{"value":"/ });","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506921,"byte_end":6506928,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506929,"byte_end":6506932,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ sender.send(3).unwrap();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506933,"byte_end":6506961,"line_start":99,"line_end":99,"column_start":1,"column_end":29}},{"value":"/ # futures::executor::block_on(t.join().unwrap());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6506962,"byte_end":6507015,"line_start":100,"line_end":100,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6507016,"byte_end":6507023,"line_start":101,"line_end":101,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516337,"byte_end":6516341,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Completes this oneshot with a successful result.","sig":null,"attributes":[{"value":"/ Completes this oneshot with a successful result.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515815,"byte_end":6515867,"line_start":331,"line_end":331,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515872,"byte_end":6515875,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This function will consume `self` and indicate to the other end, the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515880,"byte_end":6515952,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ [`Receiver`](Receiver), that the value provided is the result of the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515957,"byte_end":6516029,"line_start":334,"line_end":334,"column_start":5,"column_end":77}},{"value":"/ computation this represents.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516034,"byte_end":6516066,"line_start":335,"line_end":335,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516071,"byte_end":6516074,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ If the value is successfully enqueued for the remote end to receive,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516079,"byte_end":6516151,"line_start":337,"line_end":337,"column_start":5,"column_end":77}},{"value":"/ then `Ok(())` is returned. If the receiving end was dropped before","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516156,"byte_end":6516226,"line_start":338,"line_end":338,"column_start":5,"column_end":75}},{"value":"/ this function was called, however, then `Err` is returned with the value","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516231,"byte_end":6516307,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ provided.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516312,"byte_end":6516325,"line_start":340,"line_end":340,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516998,"byte_end":6517009,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"poll_cancel","qualname":"<Sender<T>>::poll_cancel","value":"pub fn poll_cancel(&mut Self, &mut Context) -> Poll<()>","parent":null,"children":[],"decl_id":null,"docs":" Polls this `Sender` half to detect whether its associated\n [`Receiver`](Receiver) with has been dropped.","sig":null,"attributes":[{"value":"/ Polls this `Sender` half to detect whether its associated","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516411,"byte_end":6516472,"line_start":345,"line_end":345,"column_start":5,"column_end":66}},{"value":"/ [`Receiver`](Receiver) with has been dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516477,"byte_end":6516526,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516531,"byte_end":6516534,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Return values","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516539,"byte_end":6516558,"line_start":348,"line_end":348,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516563,"byte_end":6516566,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If `Ready(())` is returned then the associated `Receiver` has been","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516571,"byte_end":6516641,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ dropped, which means any work required for sending should be canceled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516646,"byte_end":6516720,"line_start":351,"line_end":351,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516725,"byte_end":6516728,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If `Pending` is returned then the associated `Receiver` is still","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516733,"byte_end":6516801,"line_start":353,"line_end":353,"column_start":5,"column_end":73}},{"value":"/ alive and may be able to receive a message if sent. The current task,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516806,"byte_end":6516879,"line_start":354,"line_end":354,"column_start":5,"column_end":78}},{"value":"/ however, is scheduled to receive a notification if the corresponding","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516884,"byte_end":6516956,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ `Receiver` goes away.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6516961,"byte_end":6516986,"line_start":356,"line_end":356,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517438,"byte_end":6517449,"line_start":367,"line_end":367,"column_start":12,"column_end":23},"name":"is_canceled","qualname":"<Sender<T>>::is_canceled","value":"pub fn is_canceled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests to see whether this `Sender`'s corresponding `Receiver`\n has been dropped.","sig":null,"attributes":[{"value":"/ Tests to see whether this `Sender`'s corresponding `Receiver`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517103,"byte_end":6517168,"line_start":361,"line_end":361,"column_start":5,"column_end":70}},{"value":"/ has been dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517173,"byte_end":6517194,"line_start":362,"line_end":362,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517199,"byte_end":6517202,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Unlike [`poll_cancel`](Sender::poll_cancel), this function does not","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517207,"byte_end":6517278,"line_start":364,"line_end":364,"column_start":5,"column_end":76}},{"value":"/ enqueue a task for wakeup upon cancellation, but merely reports the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517283,"byte_end":6517354,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ current state, which may be subject to concurrent modification.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517359,"byte_end":6517426,"line_start":366,"line_end":366,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517764,"byte_end":6517772,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"Canceled","qualname":"::oneshot::Canceled","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from a [`Receiver`](Receiver) when the corresponding\n [`Sender`](Sender) is dropped.\n","sig":null,"attributes":[{"value":"/ Error returned from a [`Receiver`](Receiver) when the corresponding","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517601,"byte_end":6517672,"line_start":378,"line_end":378,"column_start":1,"column_end":72}},{"value":"/ [`Sender`](Sender) is dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517673,"byte_end":6517707,"line_start":379,"line_end":379,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518380,"byte_end":6518385,"line_start":400,"line_end":400,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"pub fn close(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Gracefully close this receiver, preventing any subsequent attempts to\n send to it.","sig":null,"attributes":[{"value":"/ Gracefully close this receiver, preventing any subsequent attempts to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518008,"byte_end":6518081,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ send to it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518086,"byte_end":6518101,"line_start":394,"line_end":394,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518106,"byte_end":6518109,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Any `send` operation which happens after this method returns is","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518114,"byte_end":6518181,"line_start":396,"line_end":396,"column_start":5,"column_end":72}},{"value":"/ guaranteed to fail. After calling this method, you can use","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518186,"byte_end":6518248,"line_start":397,"line_end":397,"column_start":5,"column_end":67}},{"value":"/ [`Receiver::poll`](core::future::Future::poll) to determine whether a","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518253,"byte_end":6518326,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ message had previously been sent.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518331,"byte_end":6518368,"line_start":399,"line_end":399,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518816,"byte_end":6518824,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"pub fn try_recv(&mut Self) -> Result<Option<T>, Canceled>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a message outside of the context of a task.","sig":null,"attributes":[{"value":"/ Attempts to receive a message outside of the context of a task.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518440,"byte_end":6518507,"line_start":404,"line_end":404,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518512,"byte_end":6518515,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Does not schedule a task wakeup or have any other side effects.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518520,"byte_end":6518587,"line_start":406,"line_end":406,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518592,"byte_end":6518595,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ A return value of `None` must be considered immediately stale (out of","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518600,"byte_end":6518673,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ date) unless [`close`](Receiver::close) has been called first.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518678,"byte_end":6518744,"line_start":409,"line_end":409,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518749,"byte_end":6518752,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the sender was dropped.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518757,"byte_end":6518804,"line_start":411,"line_end":411,"column_start":5,"column_end":52}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461131,"byte_end":6461135,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461172,"byte_end":6461176,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461192,"byte_end":6461196,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462037,"byte_end":6462044,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462297,"byte_end":6462304,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462667,"byte_end":6462674,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6499953,"byte_end":6499958,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6499996,"byte_end":6500001,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6500018,"byte_end":6500022,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6500218,"byte_end":6500223,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6503125,"byte_end":6503130,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468030,"byte_end":6468041,"line_start":112,"line_end":112,"column_start":19,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468496,"byte_end":6468511,"line_start":127,"line_end":127,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468995,"byte_end":6469012,"line_start":144,"line_end":144,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469555,"byte_end":6469564,"line_start":170,"line_end":170,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469844,"byte_end":6469853,"line_start":180,"line_end":180,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469863,"byte_end":6469872,"line_start":182,"line_end":182,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470356,"byte_end":6470368,"line_start":200,"line_end":200,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470575,"byte_end":6470587,"line_start":208,"line_end":208,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470889,"byte_end":6470901,"line_start":218,"line_end":218,"column_start":47,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470917,"byte_end":6470929,"line_start":220,"line_end":220,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471525,"byte_end":6471537,"line_start":242,"line_end":242,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471694,"byte_end":6471706,"line_start":249,"line_end":249,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471855,"byte_end":6471867,"line_start":255,"line_end":255,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473511,"byte_end":6473521,"line_start":310,"line_end":310,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6476009,"byte_end":6476020,"line_start":390,"line_end":390,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483150,"byte_end":6483156,"line_start":596,"line_end":596,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485572,"byte_end":6485587,"line_start":670,"line_end":670,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487895,"byte_end":6487901,"line_start":743,"line_end":743,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6488000,"byte_end":6488015,"line_start":749,"line_end":749,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6488132,"byte_end":6488143,"line_start":755,"line_end":755,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489343,"byte_end":6489354,"line_start":788,"line_end":788,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489633,"byte_end":6489641,"line_start":805,"line_end":805,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493134,"byte_end":6493142,"line_start":894,"line_end":894,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493174,"byte_end":6493182,"line_start":896,"line_end":896,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493283,"byte_end":6493291,"line_start":902,"line_end":902,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494171,"byte_end":6494179,"line_start":929,"line_end":929,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494451,"byte_end":6494468,"line_start":941,"line_end":941,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495273,"byte_end":6495290,"line_start":963,"line_end":963,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495393,"byte_end":6495410,"line_start":969,"line_end":969,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495646,"byte_end":6495651,"line_start":986,"line_end":986,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6496263,"byte_end":6496268,"line_start":1007,"line_end":1007,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6496305,"byte_end":6496310,"line_start":1008,"line_end":1008,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504262,"byte_end":6504270,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504295,"byte_end":6504301,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6507263,"byte_end":6507268,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515799,"byte_end":6515805,"line_start":330,"line_end":330,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517526,"byte_end":6517532,"line_start":372,"line_end":372,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517797,"byte_end":6517805,"line_start":383,"line_end":383,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517969,"byte_end":6517977,"line_start":390,"line_end":390,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517990,"byte_end":6517998,"line_start":392,"line_end":392,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518927,"byte_end":6518935,"line_start":417,"line_end":417,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6519145,"byte_end":6519153,"line_start":428,"line_end":428,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1504,"byte_end":1508,"line_start":42,"line_end":42,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1552,"byte_end":1559,"line_start":44,"line_end":44,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":217}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461131,"byte_end":6461135,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461172,"byte_end":6461176,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":268},"to":{"krate":2,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6461192,"byte_end":6461196,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462037,"byte_end":6462044,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2093}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462297,"byte_end":6462304,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2106}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/lock.rs","byte_start":6462667,"byte_end":6462674,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6499953,"byte_end":6499958,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6499996,"byte_end":6500001,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6500018,"byte_end":6500022,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6500218,"byte_end":6500223,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/queue.rs","byte_start":6503125,"byte_end":6503130,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468030,"byte_end":6468041,"line_start":112,"line_end":112,"column_start":19,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":289},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468452,"byte_end":6468456,"line_start":126,"line_end":126,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1922},"to":{"krate":0,"index":86}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468459,"byte_end":6468463,"line_start":126,"line_end":126,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1934},"to":{"krate":0,"index":86}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468466,"byte_end":6468471,"line_start":126,"line_end":126,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1620},"to":{"krate":0,"index":86}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468496,"byte_end":6468511,"line_start":127,"line_end":127,"column_start":22,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":304},"to":{"krate":0,"index":86}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6468995,"byte_end":6469012,"line_start":144,"line_end":144,"column_start":19,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469555,"byte_end":6469564,"line_start":170,"line_end":170,"column_start":23,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469844,"byte_end":6469853,"line_start":180,"line_end":180,"column_start":28,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":324},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6469863,"byte_end":6469872,"line_start":182,"line_end":182,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470356,"byte_end":6470368,"line_start":200,"line_end":200,"column_start":24,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470575,"byte_end":6470587,"line_start":208,"line_end":208,"column_start":26,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470889,"byte_end":6470901,"line_start":218,"line_end":218,"column_start":47,"column_end":59},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":337},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6470917,"byte_end":6470929,"line_start":220,"line_end":220,"column_start":9,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471525,"byte_end":6471537,"line_start":242,"line_end":242,"column_start":21,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471694,"byte_end":6471706,"line_start":249,"line_end":249,"column_start":23,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6471855,"byte_end":6471867,"line_start":255,"line_end":255,"column_start":28,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6473511,"byte_end":6473521,"line_start":310,"line_end":310,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6476009,"byte_end":6476020,"line_start":390,"line_end":390,"column_start":9,"column_end":20},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6483150,"byte_end":6483156,"line_start":596,"line_end":596,"column_start":9,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6485572,"byte_end":6485587,"line_start":670,"line_end":670,"column_start":9,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6487895,"byte_end":6487901,"line_start":743,"line_end":743,"column_start":19,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":297},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6488000,"byte_end":6488015,"line_start":749,"line_end":749,"column_start":19,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6488132,"byte_end":6488143,"line_start":755,"line_end":755,"column_start":19,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":289},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489343,"byte_end":6489354,"line_start":788,"line_end":788,"column_start":18,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":289},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6489633,"byte_end":6489641,"line_start":805,"line_end":805,"column_start":9,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493134,"byte_end":6493142,"line_start":894,"line_end":894,"column_start":19,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493174,"byte_end":6493182,"line_start":896,"line_end":896,"column_start":25,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":311},"to":{"krate":15,"index":242}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6493283,"byte_end":6493291,"line_start":902,"line_end":902,"column_start":20,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":311},"to":{"krate":15,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494171,"byte_end":6494179,"line_start":929,"line_end":929,"column_start":18,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6494451,"byte_end":6494468,"line_start":941,"line_end":941,"column_start":9,"column_end":26},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495273,"byte_end":6495290,"line_start":963,"line_end":963,"column_start":25,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":317},"to":{"krate":15,"index":242}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495393,"byte_end":6495410,"line_start":969,"line_end":969,"column_start":20,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":317},"to":{"krate":15,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6495646,"byte_end":6495651,"line_start":986,"line_end":986,"column_start":9,"column_end":14},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6496263,"byte_end":6496268,"line_start":1007,"line_end":1007,"column_start":31,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/mpsc/mod.rs","byte_start":6496305,"byte_end":6496310,"line_start":1008,"line_end":1008,"column_start":31,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":1934}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504262,"byte_end":6504270,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6504295,"byte_end":6504301,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":400},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6507263,"byte_end":6507268,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6515799,"byte_end":6515805,"line_start":330,"line_end":330,"column_start":9,"column_end":15},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517526,"byte_end":6517532,"line_start":372,"line_end":372,"column_start":18,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":400},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517797,"byte_end":6517805,"line_start":383,"line_end":383,"column_start":23,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517969,"byte_end":6517977,"line_start":390,"line_end":390,"column_start":28,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":415},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6517990,"byte_end":6517998,"line_start":392,"line_end":392,"column_start":9,"column_end":17},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6518927,"byte_end":6518935,"line_start":417,"line_end":417,"column_start":20,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":8319}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-preview-0.3.0-alpha.19/src/oneshot.rs","byte_start":6519145,"byte_end":6519153,"line_start":428,"line_end":428,"column_start":18,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":2117}}]}