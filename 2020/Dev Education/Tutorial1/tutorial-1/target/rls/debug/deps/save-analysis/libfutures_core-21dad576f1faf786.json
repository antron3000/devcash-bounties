{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19","program":"/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_core","--edition=2018","/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=21dad576f1faf786","-C","extra-filename=-21dad576f1faf786","--out-dir","/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","-L","dependency=/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/alansky/.rustup/toolchains/nightly-2020-07-02-x86_64-unknown-linux-gnu"],"output":"/home/alansky/Dev/devcash-bounties/2020/Dev Education/Tutorial1/substrate-node-template/target/rls/debug/deps/libfutures_core-21dad576f1faf786.rmeta"},"prelude":{"crate_id":{"name":"futures_core","disambiguator":[10438555113138517946,4178421672829186342]},"crate_root":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src","external_crates":[{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}}],"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":1247,"line_start":1,"line_end":36,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":8319},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1364,"byte_end":1370,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1416,"byte_end":1425,"line_start":10,"line_end":10,"column_start":28,"column_end":37},"alias_span":null,"name":"FutureObj","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":21},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1427,"byte_end":1441,"line_start":10,"line_end":10,"column_start":39,"column_end":53},"alias_span":null,"name":"LocalFutureObj","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1443,"byte_end":1458,"line_start":10,"line_end":10,"column_start":55,"column_end":70},"alias_span":null,"name":"UnsafeFutureObj","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":2,"index":8319},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":976,"byte_end":982,"line_start":23,"line_end":23,"column_start":39,"column_end":45},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":984,"byte_end":995,"line_start":23,"line_end":23,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":997,"byte_end":1006,"line_start":23,"line_end":23,"column_start":60,"column_end":69},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1064,"byte_end":1070,"line_start":26,"line_end":26,"column_start":39,"column_end":45},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":242},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1072,"byte_end":1083,"line_start":26,"line_end":26,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1085,"byte_end":1094,"line_start":26,"line_end":26,"column_start":60,"column_end":69},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23348,"byte_end":23353,"line_start":7,"line_end":7,"column_start":23,"column_end":28},"alias_span":null,"name":"Spawn","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23355,"byte_end":23365,"line_start":7,"line_end":7,"column_start":30,"column_end":40},"alias_span":null,"name":"LocalSpawn","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23367,"byte_end":23377,"line_start":7,"line_end":7,"column_start":42,"column_end":52},"alias_span":null,"name":"SpawnError","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/mod.rs","byte_start":28193,"byte_end":28204,"line_start":10,"line_end":10,"column_start":29,"column_end":40},"alias_span":null,"name":"AtomicWaker","value":"","parent":{"krate":0,"index":341}},{"kind":"Use","ref_id":{"krate":2,"index":8459},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23438,"byte_end":23445,"line_start":12,"line_end":12,"column_start":22,"column_end":29},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":2,"index":32507},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23447,"byte_end":23451,"line_start":12,"line_end":12,"column_start":31,"column_end":35},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":2,"index":8469},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23453,"byte_end":23458,"line_start":12,"line_end":12,"column_start":37,"column_end":42},"alias_span":null,"name":"Waker","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":2,"index":32547},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23460,"byte_end":23468,"line_start":12,"line_end":12,"column_start":44,"column_end":52},"alias_span":null,"name":"RawWaker","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":2,"index":32556},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23470,"byte_end":23484,"line_start":12,"line_end":12,"column_start":54,"column_end":68},"alias_span":null,"name":"RawWakerVTable","value":"","parent":{"krate":0,"index":294}},{"kind":"Use","ref_id":{"krate":2,"index":32507},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1160,"byte_end":1164,"line_start":30,"line_end":30,"column_start":36,"column_end":40},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1243,"byte_end":1244,"line_start":35,"line_end":35,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":378}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":1247,"line_start":1,"line_end":36,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" Core traits and types for asynchronous operations in Rust.\n","sig":null,"attributes":[{"value":"! Core traits and types for asynchronous operations in Rust.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":189,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":445,"byte_end":466,"line_start":10,"line_end":10,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":192},{"krate":0,"index":196},{"krate":0,"index":203}],"decl_id":null,"docs":" Futures.\n","sig":null,"attributes":[{"value":"! Futures.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1249,"byte_end":1261,"line_start":1,"line_end":1,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":21},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4839,"byte_end":4853,"line_start":16,"line_end":16,"column_start":12,"column_end":26},"name":"LocalFutureObj","qualname":"::future::future_obj::LocalFutureObj","value":"LocalFutureObj {  }","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" A custom trait object for polling futures, roughly akin to\n `Box<dyn Future<Output = T> + 'a>`.","sig":null,"attributes":[{"value":"/ A custom trait object for polling futures, roughly akin to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4550,"byte_end":4612,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ `Box<dyn Future<Output = T> + 'a>`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4613,"byte_end":4652,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4653,"byte_end":4656,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This custom trait object was introduced as currently it is not possible to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4657,"byte_end":4735,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ take `dyn Trait` by value and `Box<dyn Trait>` is not available in no_std","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4736,"byte_end":4813,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ contexts.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":4814,"byte_end":4827,"line_start":15,"line_end":15,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5636,"byte_end":5639,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<LocalFutureObj>::new","value":"pub fn new<F: UnsafeFutureObj + 'a>(F) -> LocalFutureObj","parent":null,"children":[],"decl_id":null,"docs":" Create a `LocalFutureObj` from a custom trait object representation.\n","sig":null,"attributes":[{"value":"/ Create a `LocalFutureObj` from a custom trait object representation.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5538,"byte_end":5610,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5615,"byte_end":5624,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6181,"byte_end":6196,"line_start":55,"line_end":55,"column_start":19,"column_end":34},"name":"into_future_obj","qualname":"<LocalFutureObj>::into_future_obj","value":"pub unsafe fn into_future_obj(Self) -> FutureObj","parent":null,"children":[],"decl_id":null,"docs":" Converts the `LocalFutureObj` into a `FutureObj`\n To make this operation safe one has to ensure that the `UnsafeFutureObj`\n instance from which this `LocalFutureObj` was created actually\n implements `Send`.\n","sig":null,"attributes":[{"value":"/ Converts the `LocalFutureObj` into a `FutureObj`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5917,"byte_end":5969,"line_start":50,"line_end":50,"column_start":5,"column_end":57}},{"value":"/ To make this operation safe one has to ensure that the `UnsafeFutureObj`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5974,"byte_end":6050,"line_start":51,"line_end":51,"column_start":5,"column_end":81}},{"value":"/ instance from which this `LocalFutureObj` was created actually","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6055,"byte_end":6121,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ implements `Send`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6126,"byte_end":6148,"line_start":53,"line_end":53,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6153,"byte_end":6162,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7460,"byte_end":7469,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"FutureObj","qualname":"::future::future_obj::FutureObj","value":"","parent":null,"children":[],"decl_id":null,"docs":" A custom trait object for polling futures, roughly akin to\n `Box<dyn Future<Output = T> + Send + 'a>`.","sig":null,"attributes":[{"value":"/ A custom trait object for polling futures, roughly akin to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6987,"byte_end":7049,"line_start":93,"line_end":93,"column_start":1,"column_end":63}},{"value":"/ `Box<dyn Future<Output = T> + Send + 'a>`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7050,"byte_end":7096,"line_start":94,"line_end":94,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7097,"byte_end":7100,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ This custom trait object was introduced as currently it is not possible to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7101,"byte_end":7179,"line_start":96,"line_end":96,"column_start":1,"column_end":79}},{"value":"/ take `dyn Trait` by value and `Box<dyn Trait>` is not available in no_std","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7180,"byte_end":7257,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/ contexts.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7258,"byte_end":7271,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7272,"byte_end":7275,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ You should generally not need to use this type outside of `no_std` or when","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7276,"byte_end":7354,"line_start":100,"line_end":100,"column_start":1,"column_end":79}},{"value":"/ implementing `Spawn`, consider using [`BoxFuture`](crate::future::BoxFuture)","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7355,"byte_end":7435,"line_start":101,"line_end":101,"column_start":1,"column_end":81}},{"value":"/ instead.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7436,"byte_end":7448,"line_start":102,"line_end":102,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7713,"byte_end":7716,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<FutureObj>::new","value":"pub fn new<F: UnsafeFutureObj + Send>(F) -> FutureObj","parent":null,"children":[],"decl_id":null,"docs":" Create a `FutureObj` from a custom trait object representation.\n","sig":null,"attributes":[{"value":"/ Create a `FutureObj` from a custom trait object representation.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7620,"byte_end":7687,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7692,"byte_end":7701,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":77},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8727,"byte_end":8742,"line_start":145,"line_end":145,"column_start":18,"column_end":33},"name":"UnsafeFutureObj","qualname":"::future::future_obj::UnsafeFutureObj","value":"UnsafeFutureObj<'a, T>: 'a","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A custom implementation of a future trait object for `FutureObj`, providing\n a vtable with drop support.","sig":null,"attributes":[{"value":"/ A custom implementation of a future trait object for `FutureObj`, providing","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8330,"byte_end":8409,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ a vtable with drop support.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8410,"byte_end":8441,"line_start":136,"line_end":136,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8442,"byte_end":8445,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This custom representation is typically used only in `no_std` contexts,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8446,"byte_end":8521,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ where the default `Box`-based implementation is not available.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8522,"byte_end":8588,"line_start":139,"line_end":139,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8589,"byte_end":8592,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8593,"byte_end":8605,"line_start":141,"line_end":141,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8606,"byte_end":8609,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ See the safety notes on individual methods for what guarantees an","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8610,"byte_end":8679,"line_start":143,"line_end":143,"column_start":1,"column_end":70}},{"value":"/ implementor must provide.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8680,"byte_end":8709,"line_start":144,"line_end":144,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9187,"byte_end":9195,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::future::future_obj::UnsafeFutureObj::into_raw","value":"pub fn into_raw(Self) -> *mut Future<Output = T> + 'a","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Convert an owned instance into a (conceptually owned) fat pointer.","sig":null,"attributes":[{"value":"/ Convert an owned instance into a (conceptually owned) fat pointer.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8760,"byte_end":8830,"line_start":146,"line_end":146,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8835,"byte_end":8838,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8843,"byte_end":8855,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8860,"byte_end":8863,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ ## Implementor","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8868,"byte_end":8886,"line_start":150,"line_end":150,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8891,"byte_end":8894,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The trait implementor must guarantee that it is safe to convert the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8899,"byte_end":8970,"line_start":152,"line_end":152,"column_start":5,"column_end":76}},{"value":"/ provided `*mut (dyn Future<Output = T> + 'a)` into a `Pin<&mut (dyn","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8975,"byte_end":9046,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ Future<Output = T> + 'a)>` and call methods on it, non-reentrantly,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9051,"byte_end":9122,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ until `UnsafeFutureObj::drop` is called with it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9127,"byte_end":9179,"line_start":155,"line_end":155,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9873,"byte_end":9877,"line_start":176,"line_end":176,"column_start":15,"column_end":19},"name":"drop","qualname":"::future::future_obj::UnsafeFutureObj::drop","value":"pub unsafe fn drop(*mut Future<Output = T> + 'a)","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Drops the future represented by the given fat pointer.","sig":null,"attributes":[{"value":"/ Drops the future represented by the given fat pointer.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9246,"byte_end":9304,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9309,"byte_end":9312,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9317,"byte_end":9329,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9334,"byte_end":9337,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ## Implementor","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9342,"byte_end":9360,"line_start":162,"line_end":162,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9365,"byte_end":9368,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The trait implementor must guarantee that it is safe to call this","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9373,"byte_end":9442,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/ function once per `into_raw` invocation.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9447,"byte_end":9491,"line_start":165,"line_end":165,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9496,"byte_end":9499,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ## Caller","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9504,"byte_end":9517,"line_start":167,"line_end":167,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9522,"byte_end":9525,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9530,"byte_end":9557,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9562,"byte_end":9565,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/  * the pointer passed was obtained from an `into_raw` invocation from","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9570,"byte_end":9643,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/    this same trait object","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9648,"byte_end":9677,"line_start":172,"line_end":172,"column_start":5,"column_end":34}},{"value":"/  * the pointer is not currently in use as a `Pin<&mut (dyn Future<Output","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9682,"byte_end":9758,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/    = T> + 'a)>`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9763,"byte_end":9782,"line_start":174,"line_end":174,"column_start":5,"column_end":24}},{"value":"/  * the pointer must not be used again after this function is called","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":9787,"byte_end":9858,"line_start":175,"line_end":175,"column_start":5,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":171},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1637,"byte_end":1646,"line_start":15,"line_end":15,"column_start":10,"column_end":19},"name":"BoxFuture","qualname":"::future::BoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Future`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Future`] for use in cases where you can't","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1462,"byte_end":1536,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1537,"byte_end":1601,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1602,"byte_end":1627,"line_start":14,"line_end":14,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":174},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1805,"byte_end":1819,"line_start":19,"line_end":19,"column_start":10,"column_end":24},"name":"LocalBoxFuture","qualname":"::future::LocalBoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxFuture`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxFuture`, but without the `Send` requirement.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1717,"byte_end":1769,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1770,"byte_end":1795,"line_start":18,"line_end":18,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":177},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2346,"byte_end":2357,"line_start":29,"line_end":29,"column_start":11,"column_end":22},"name":"FusedFuture","qualname":"::future::FusedFuture","value":"FusedFuture: Future","parent":null,"children":[{"krate":0,"index":178}],"decl_id":null,"docs":" A future which tracks whether or not the underlying future\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A future which tracks whether or not the underlying future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1883,"byte_end":1945,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1946,"byte_end":1977,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1978,"byte_end":1981,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":1982,"byte_end":2060,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll` (or `try_poll`) returned","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2061,"byte_end":2129,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ `Poll::Ready`. However, `is_terminated` may also return `true` if a future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2130,"byte_end":2208,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ has become inactive and can no longer make progress and should be ignored","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2209,"byte_end":2286,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ or dropped rather than being `poll`ed again.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2287,"byte_end":2335,"line_start":28,"line_end":28,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2451,"byte_end":2464,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::future::FusedFuture::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" Returns `true` if the underlying future should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the underlying future should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2372,"byte_end":2443,"line_start":30,"line_end":30,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2906,"byte_end":2912,"line_start":53,"line_end":53,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::future::private_try_future::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3136,"byte_end":3145,"line_start":60,"line_end":60,"column_start":11,"column_end":20},"name":"TryFuture","qualname":"::future::TryFuture","value":"TryFuture: Future + private_try_future::Sealed","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"decl_id":null,"docs":" A convenience for futures that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for futures that return `Result` values that includes","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3002,"byte_end":3073,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3074,"byte_end":3125,"line_start":59,"line_end":59,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":193},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3255,"byte_end":3257,"line_start":62,"line_end":62,"column_start":10,"column_end":12},"name":"Ok","qualname":"::future::TryFuture::Ok","value":"type Ok;","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3189,"byte_end":3245,"line_start":61,"line_end":61,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":194},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3321,"byte_end":3326,"line_start":65,"line_end":65,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::TryFuture::Error","value":"type Error;","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3264,"byte_end":3311,"line_start":64,"line_end":64,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3576,"byte_end":3584,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"try_poll","qualname":"::future::TryFuture::try_poll","value":"pub fn try_poll(Pin<&mut Self>, &mut Context)\n-> Poll<Result<Self::Ok, Self::Error>>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Poll this `TryFuture` as if it were a `Future`.","sig":null,"attributes":[{"value":"/ Poll this `TryFuture` as if it were a `Future`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3333,"byte_end":3384,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3389,"byte_end":3392,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3397,"byte_end":3473,"line_start":69,"line_end":69,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Future` trait; in the future it won't be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3478,"byte_end":3552,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3557,"byte_end":3568,"line_start":71,"line_end":71,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":216},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":232},{"krate":0,"index":237},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":257},{"krate":0,"index":261},{"krate":0,"index":268}],"decl_id":null,"docs":" Asynchronous streams.\n","sig":null,"attributes":[{"value":"! Asynchronous streams.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15089,"byte_end":15114,"line_start":1,"line_end":1,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":222},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15370,"byte_end":15379,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"BoxStream","qualname":"::stream::BoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Stream`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Stream`] for use in cases where you can't","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15195,"byte_end":15269,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15270,"byte_end":15334,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15335,"byte_end":15360,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":225},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15536,"byte_end":15550,"line_start":14,"line_end":14,"column_start":10,"column_end":24},"name":"LocalBoxStream","qualname":"::stream::LocalBoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxStream`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxStream`, but without the `Send` requirement.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15448,"byte_end":15500,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15501,"byte_end":15526,"line_start":13,"line_end":13,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16157,"byte_end":16163,"line_start":27,"line_end":27,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"decl_id":null,"docs":" A stream of values produced asynchronously.","sig":null,"attributes":[{"value":"/ A stream of values produced asynchronously.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15612,"byte_end":15659,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15660,"byte_end":15663,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `Future<Output = T>` is an asynchronous version of `T`, then `Stream<Item","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15664,"byte_end":15744,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ = T>` is an asynchronous version of `Iterator<Item = T>`. A stream","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15745,"byte_end":15815,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ represents a sequence of value-producing events that occur asynchronously to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15816,"byte_end":15896,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the caller.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15897,"byte_end":15912,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15913,"byte_end":15916,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The trait is modeled after `Future`, but allows `poll_next` to be called","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15917,"byte_end":15993,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ even after a value has been produced, yielding `None` once the stream has","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":15994,"byte_end":16071,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ been fully exhausted.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16072,"byte_end":16097,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16098,"byte_end":16146,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":229},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16213,"byte_end":16217,"line_start":29,"line_end":29,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Stream::Item","value":"type Item;","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Values yielded by the stream.\n","sig":null,"attributes":[{"value":"/ Values yielded by the stream.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16170,"byte_end":16203,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17451,"byte_end":17460,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"poll_next","qualname":"::stream::Stream::poll_next","value":"pub fn poll_next(Pin<&mut Self>, &mut Context) -> Poll<Option<Self::Item>>","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Attempt to pull out the next value of this stream, registering the\n current task for wakeup if the value is not yet available, and returning\n `None` if the stream is exhausted.","sig":null,"attributes":[{"value":"/ Attempt to pull out the next value of this stream, registering the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16224,"byte_end":16294,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ current task for wakeup if the value is not yet available, and returning","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16299,"byte_end":16375,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ `None` if the stream is exhausted.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16380,"byte_end":16418,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16423,"byte_end":16426,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16431,"byte_end":16449,"line_start":35,"line_end":35,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16454,"byte_end":16457,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ There are several possible return values, each indicating a distinct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16462,"byte_end":16534,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ stream state:","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16539,"byte_end":16556,"line_start":38,"line_end":38,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16561,"byte_end":16564,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Pending` means that this stream's next value is not ready","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16569,"byte_end":16639,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ yet. Implementations will ensure that the current task will be notified","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16644,"byte_end":16719,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ when the next value may be ready.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16724,"byte_end":16761,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16766,"byte_end":16769,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Some(val))` means that the stream has successfully","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16774,"byte_end":16843,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ produced a value, `val`, and may produce further values on subsequent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16848,"byte_end":16921,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ `poll_next` calls.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16926,"byte_end":16948,"line_start":46,"line_end":46,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16953,"byte_end":16956,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(None)` means that the stream has terminated, and","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":16961,"byte_end":17028,"line_start":48,"line_end":48,"column_start":5,"column_end":72}},{"value":"/ `poll_next` should not be invoked again.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17033,"byte_end":17077,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17082,"byte_end":17085,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17090,"byte_end":17102,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17107,"byte_end":17110,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Once a stream is finished, i.e. `Ready(None)` has been returned, further","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17115,"byte_end":17191,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ calls to `poll_next` may result in a panic or other \"bad behavior\".  If","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17196,"byte_end":17271,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ this is difficult to guard against then the `fuse` adapter can be used","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17276,"byte_end":17350,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ to ensure that `poll_next` always returns `Ready(None)` in subsequent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17355,"byte_end":17428,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ calls.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17433,"byte_end":17443,"line_start":57,"line_end":57,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18868,"byte_end":18877,"line_start":90,"line_end":90,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::stream::Stream::size_hint","value":"pub fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":228},"children":[],"decl_id":null,"docs":" Returns the bounds on the remaining length of the stream.","sig":null,"attributes":[{"value":"/ Returns the bounds on the remaining length of the stream.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17562,"byte_end":17623,"line_start":63,"line_end":63,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17628,"byte_end":17631,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Specifically, `size_hint()` returns a tuple where the first element","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17636,"byte_end":17707,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ is the lower bound, and the second element is the upper bound.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17712,"byte_end":17778,"line_start":66,"line_end":66,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17783,"byte_end":17786,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The second half of the tuple that is returned is an [`Option`]`<`[`usize`]`>`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17791,"byte_end":17873,"line_start":68,"line_end":68,"column_start":5,"column_end":87}},{"value":"/ A [`None`] here means that either there is no known upper bound, or the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17878,"byte_end":17953,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/ upper bound is larger than [`usize`].","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":17958,"byte_end":17999,"line_start":70,"line_end":70,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18004,"byte_end":18007,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Implementation notes","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18012,"byte_end":18038,"line_start":72,"line_end":72,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18043,"byte_end":18046,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ It is not enforced that a stream implementation yields the declared","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18051,"byte_end":18122,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ number of elements. A buggy stream may yield less than the lower bound","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18127,"byte_end":18201,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"/ or more than the upper bound of elements.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18206,"byte_end":18251,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18256,"byte_end":18259,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ `size_hint()` is primarily intended to be used for optimizations such as","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18264,"byte_end":18340,"line_start":78,"line_end":78,"column_start":5,"column_end":81}},{"value":"/ reserving space for the elements of the stream, but must not be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18345,"byte_end":18412,"line_start":79,"line_end":79,"column_start":5,"column_end":72}},{"value":"/ trusted to e.g., omit bounds checks in unsafe code. An incorrect","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18417,"byte_end":18485,"line_start":80,"line_end":80,"column_start":5,"column_end":73}},{"value":"/ implementation of `size_hint()` should not lead to memory safety","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18490,"byte_end":18558,"line_start":81,"line_end":81,"column_start":5,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18563,"byte_end":18578,"line_start":82,"line_end":82,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18583,"byte_end":18586,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ That said, the implementation should provide a correct estimation,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18591,"byte_end":18661,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/ because otherwise it would be a violation of the trait's protocol.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18666,"byte_end":18736,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18741,"byte_end":18744,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `(0, `[`None`]`)` which is correct for any","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18749,"byte_end":18830,"line_start":87,"line_end":87,"column_start":5,"column_end":86}},{"value":"/ stream.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18835,"byte_end":18846,"line_start":88,"line_end":88,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":18851,"byte_end":18860,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":242},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20144,"byte_end":20155,"line_start":137,"line_end":137,"column_start":11,"column_end":22},"name":"FusedStream","qualname":"::stream::FusedStream","value":"FusedStream: Stream","parent":null,"children":[{"krate":0,"index":243}],"decl_id":null,"docs":" A stream which tracks whether or not the underlying stream\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A stream which tracks whether or not the underlying stream","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19667,"byte_end":19729,"line_start":129,"line_end":129,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19730,"byte_end":19761,"line_start":130,"line_end":130,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19762,"byte_end":19765,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19766,"byte_end":19844,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll_next` (or `try_poll_next`) returned","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19845,"byte_end":19923,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ `Poll::Ready(None)`. However, `is_terminated` may also return `true` if a","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19924,"byte_end":20001,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/ stream has become inactive and can no longer make progress and should be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20002,"byte_end":20078,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ ignored or dropped rather than being polled again.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20079,"byte_end":20133,"line_start":136,"line_end":136,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20238,"byte_end":20251,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::stream::FusedStream::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" Returns `true` if the stream should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the stream should no longer be polled.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20170,"byte_end":20230,"line_start":138,"line_end":138,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":252},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20693,"byte_end":20699,"line_start":161,"line_end":161,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::stream::private_try_stream::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":257},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20921,"byte_end":20930,"line_start":168,"line_end":168,"column_start":11,"column_end":20},"name":"TryStream","qualname":"::stream::TryStream","value":"TryStream: Stream + private_try_stream::Sealed","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"decl_id":null,"docs":" A convenience for streams that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for streams that return `Result` values that includes","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20787,"byte_end":20858,"line_start":166,"line_end":166,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20859,"byte_end":20910,"line_start":167,"line_end":167,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21040,"byte_end":21042,"line_start":170,"line_end":170,"column_start":10,"column_end":12},"name":"Ok","qualname":"::stream::TryStream::Ok","value":"type Ok;","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20974,"byte_end":21030,"line_start":169,"line_end":169,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":259},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21106,"byte_end":21111,"line_start":173,"line_end":173,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::TryStream::Error","value":"type Error;","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21049,"byte_end":21096,"line_start":172,"line_end":172,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21361,"byte_end":21374,"line_start":180,"line_end":180,"column_start":8,"column_end":21},"name":"try_poll_next","qualname":"::stream::TryStream::try_poll_next","value":"pub fn try_poll_next(Pin<&mut Self>, &mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>>","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" Poll this `TryStream` as if it were a `Stream`.","sig":null,"attributes":[{"value":"/ Poll this `TryStream` as if it were a `Stream`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21118,"byte_end":21169,"line_start":175,"line_end":175,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21174,"byte_end":21177,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21182,"byte_end":21258,"line_start":177,"line_end":177,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Stream` trait; in the future it won't be","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21263,"byte_end":21337,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21342,"byte_end":21353,"line_start":179,"line_end":179,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":294},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" Task notification.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1098,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"! Task notification.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23267,"byte_end":23289,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24053,"byte_end":24058,"line_start":6,"line_end":6,"column_start":11,"column_end":16},"name":"Spawn","qualname":"::task::spawn::Spawn","value":"Spawn","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" The `Spawn` trait allows for pushing futures onto an executor that will\n run them to completion.\n","sig":null,"attributes":[{"value":"/ The `Spawn` trait allows for pushing futures onto an executor that will","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":23939,"byte_end":24014,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ run them to completion.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24015,"byte_end":24042,"line_start":5,"line_end":5,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24378,"byte_end":24387,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"spawn_obj","qualname":"::task::spawn::Spawn::spawn_obj","value":"pub fn spawn_obj(&mut Self, FutureObj) -> Result<(), SpawnError>","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Spawns a future that will be run to completion.","sig":null,"attributes":[{"value":"/ Spawns a future that will be run to completion.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24065,"byte_end":24116,"line_start":7,"line_end":7,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24121,"byte_end":24124,"line_start":8,"line_end":8,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24129,"byte_end":24141,"line_start":9,"line_end":9,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24146,"byte_end":24149,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ The executor may be unable to spawn tasks. Spawn errors should","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24154,"byte_end":24220,"line_start":11,"line_end":11,"column_start":5,"column_end":71}},{"value":"/ represent relatively rare scenarios, such as the executor","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24225,"byte_end":24286,"line_start":12,"line_end":12,"column_start":5,"column_end":66}},{"value":"/ having been shut down so that it is no longer able to accept","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24291,"byte_end":24355,"line_start":13,"line_end":13,"column_start":5,"column_end":69}},{"value":"/ tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24360,"byte_end":24370,"line_start":14,"line_end":14,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24809,"byte_end":24815,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"status","qualname":"::task::spawn::Spawn::status","value":"pub fn status(&Self) -> Result<(), SpawnError>","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Determines whether the executor is able to spawn new tasks.","sig":null,"attributes":[{"value":"/ Determines whether the executor is able to spawn new tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24471,"byte_end":24534,"line_start":18,"line_end":18,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24539,"byte_end":24542,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ This method will return `Ok` when the executor is *likely*","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24547,"byte_end":24609,"line_start":20,"line_end":20,"column_start":5,"column_end":67}},{"value":"/ (but not guaranteed) to accept a subsequent spawn attempt.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24614,"byte_end":24676,"line_start":21,"line_end":21,"column_start":5,"column_end":67}},{"value":"/ Likewise, an `Err` return means that `spawn` is likely, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24681,"byte_end":24744,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ not guaranteed, to yield an error.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24749,"byte_end":24787,"line_start":23,"line_end":23,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24792,"byte_end":24801,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24992,"byte_end":25002,"line_start":32,"line_end":32,"column_start":11,"column_end":21},"name":"LocalSpawn","qualname":"::task::spawn::LocalSpawn","value":"LocalSpawn","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"decl_id":null,"docs":" The `LocalSpawn` is similar to [`Spawn`], but allows spawning futures\n that don't implement `Send`.\n","sig":null,"attributes":[{"value":"/ The `LocalSpawn` is similar to [`Spawn`], but allows spawning futures","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24875,"byte_end":24948,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ that don't implement `Send`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":24949,"byte_end":24981,"line_start":31,"line_end":31,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25322,"byte_end":25337,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"spawn_local_obj","qualname":"::task::spawn::LocalSpawn::spawn_local_obj","value":"pub fn spawn_local_obj(&mut Self, LocalFutureObj) -> Result<(), SpawnError>","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" Spawns a future that will be run to completion.","sig":null,"attributes":[{"value":"/ Spawns a future that will be run to completion.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25009,"byte_end":25060,"line_start":33,"line_end":33,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25065,"byte_end":25068,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25073,"byte_end":25085,"line_start":35,"line_end":35,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25090,"byte_end":25093,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The executor may be unable to spawn tasks. Spawn errors should","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25098,"byte_end":25164,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"/ represent relatively rare scenarios, such as the executor","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25169,"byte_end":25230,"line_start":38,"line_end":38,"column_start":5,"column_end":66}},{"value":"/ having been shut down so that it is no longer able to accept","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25235,"byte_end":25299,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25304,"byte_end":25314,"line_start":40,"line_end":40,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25764,"byte_end":25776,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"status_local","qualname":"::task::spawn::LocalSpawn::status_local","value":"pub fn status_local(&Self) -> Result<(), SpawnError>","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":" Determines whether the executor is able to spawn new tasks.","sig":null,"attributes":[{"value":"/ Determines whether the executor is able to spawn new tasks.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25426,"byte_end":25489,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25494,"byte_end":25497,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This method will return `Ok` when the executor is *likely*","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25502,"byte_end":25564,"line_start":46,"line_end":46,"column_start":5,"column_end":67}},{"value":"/ (but not guaranteed) to accept a subsequent spawn attempt.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25569,"byte_end":25631,"line_start":47,"line_end":47,"column_start":5,"column_end":67}},{"value":"/ Likewise, an `Err` return means that `spawn` is likely, but","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25636,"byte_end":25699,"line_start":48,"line_end":48,"column_start":5,"column_end":68}},{"value":"/ not guaranteed, to yield an error.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25704,"byte_end":25742,"line_start":49,"line_end":49,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25747,"byte_end":25756,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25891,"byte_end":25901,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"SpawnError","qualname":"::task::spawn::SpawnError","value":"SpawnError {  }","parent":null,"children":[{"krate":0,"index":309}],"decl_id":null,"docs":" An error that occurred during spawning.\n","sig":null,"attributes":[{"value":"/ An error that occurred during spawning.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25836,"byte_end":25879,"line_start":56,"line_end":56,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26426,"byte_end":26434,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<SpawnError>::shutdown","value":"pub fn shutdown() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Spawning failed because the executor has been shut down.\n","sig":null,"attributes":[{"value":"/ Spawning failed because the executor has been shut down.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26354,"byte_end":26414,"line_start":79,"line_end":79,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26563,"byte_end":26574,"line_start":85,"line_end":85,"column_start":12,"column_end":23},"name":"is_shutdown","qualname":"<SpawnError>::is_shutdown","value":"pub fn is_shutdown(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether spawning failed to the executor being shut down.\n","sig":null,"attributes":[{"value":"/ Check whether spawning failed to the executor being shut down.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26485,"byte_end":26551,"line_start":84,"line_end":84,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":341},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"__internal","qualname":"::task::__internal","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/mod.rs","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":370}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31109,"byte_end":31120,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"AtomicWaker","qualname":"::task::__internal::atomic_waker::AtomicWaker","value":"AtomicWaker {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"decl_id":null,"docs":" A synchronization primitive for task wakeup.","sig":null,"attributes":[{"value":"/ A synchronization primitive for task wakeup.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28374,"byte_end":28422,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28423,"byte_end":28426,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Sometimes the task interested in a given event will change over time.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28427,"byte_end":28500,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ An `AtomicWaker` can coordinate concurrent notifications with the consumer","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28501,"byte_end":28579,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ potentially \"updating\" the underlying task to wake up. This is useful in","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28580,"byte_end":28656,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ scenarios where a computation completes in another thread and wants to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28657,"byte_end":28731,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ notify the consumer, but the consumer is in the process of being migrated to","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28732,"byte_end":28812,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ a new logical task.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28813,"byte_end":28836,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28837,"byte_end":28840,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Consumers should call `register` before checking the result of a computation","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28841,"byte_end":28921,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ and producers should call `wake` after producing the computation (this","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28922,"byte_end":28996,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ differs from the usual `thread::park` pattern). It is also permitted for","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":28997,"byte_end":29073,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ `wake` to be called **before** `register`. This results in a no-op.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29074,"byte_end":29145,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29146,"byte_end":29149,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A single `AtomicWaker` may be reused for any number of calls to `register` or","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29150,"byte_end":29231,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ `wake`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29232,"byte_end":29243,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29244,"byte_end":29247,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Memory ordering","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29248,"byte_end":29269,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29270,"byte_end":29273,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Calling `register` \"acquires\" all memory \"released\" by calls to `wake`","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29274,"byte_end":29348,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ before the call to `register`.  Later calls to `wake` will wake the","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29349,"byte_end":29420,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ registered waker (on contention this wake might be triggered in `register`).","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29421,"byte_end":29501,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29502,"byte_end":29505,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For concurrent calls to `register` (should be avoided) the ordering is only","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29506,"byte_end":29585,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ guaranteed for the winning call.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29586,"byte_end":29622,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29623,"byte_end":29626,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29627,"byte_end":29641,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29642,"byte_end":29645,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example providing a `Flag` that can be signalled manually","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29646,"byte_end":29724,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ when it is ready.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29725,"byte_end":29746,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29747,"byte_end":29750,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29751,"byte_end":29758,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Future;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29759,"byte_end":29791,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29792,"byte_end":29844,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29845,"byte_end":29868,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29869,"byte_end":29907,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29908,"byte_end":29953,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29954,"byte_end":29976,"line_start":44,"line_end":44,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29977,"byte_end":29980,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ struct Inner {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":29981,"byte_end":29999,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30000,"byte_end":30027,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/     set: AtomicBool,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30028,"byte_end":30052,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30053,"byte_end":30058,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30059,"byte_end":30062,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone)]","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30063,"byte_end":30083,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/ struct Flag(Arc<Inner>);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30084,"byte_end":30112,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30113,"byte_end":30116,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ impl Flag {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30117,"byte_end":30132,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/     pub fn new() -> Self {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30133,"byte_end":30163,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/         Flag(Arc::new(Inner {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30164,"byte_end":30197,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/             waker: AtomicWaker::new(),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30198,"byte_end":30240,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/             set: AtomicBool::new(false),","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30241,"byte_end":30285,"line_start":58,"line_end":58,"column_start":1,"column_end":45}},{"value":"/         }))","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30286,"byte_end":30301,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30302,"byte_end":30311,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30312,"byte_end":30315,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     pub fn signal(&self) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30316,"byte_end":30346,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/         self.0.set.store(true, Relaxed);","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30347,"byte_end":30391,"line_start":63,"line_end":63,"column_start":1,"column_end":45}},{"value":"/         self.0.waker.wake();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30392,"byte_end":30424,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30425,"byte_end":30434,"line_start":65,"line_end":65,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30435,"byte_end":30440,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30441,"byte_end":30444,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ impl Future for Flag {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30445,"byte_end":30471,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/     type Output = ();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30472,"byte_end":30497,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30498,"byte_end":30501,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30502,"byte_end":30575,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/         // quick check to avoid registration if already done.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30576,"byte_end":30641,"line_start":72,"line_end":72,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30642,"byte_end":30683,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/             return Poll::Ready(());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30684,"byte_end":30723,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30724,"byte_end":30737,"line_start":75,"line_end":75,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30738,"byte_end":30741,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/         self.0.waker.register(cx.waker());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30742,"byte_end":30788,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30789,"byte_end":30792,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         // Need to check condition **after** `register` to avoid a race","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30793,"byte_end":30868,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/         // condition that would result in lost notifications.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30869,"byte_end":30934,"line_start":80,"line_end":80,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30935,"byte_end":30976,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/             Poll::Ready(())","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":30977,"byte_end":31008,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/         } else {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31009,"byte_end":31029,"line_start":83,"line_end":83,"column_start":1,"column_end":21}},{"value":"/             Poll::Pending","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31030,"byte_end":31059,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31060,"byte_end":31073,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31074,"byte_end":31083,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31084,"byte_end":31089,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":31090,"byte_end":31097,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36179,"byte_end":36182,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicWaker>::new","value":"pub fn new() -> AtomicWaker","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicWaker`.\n","sig":null,"attributes":[{"value":"/ Create an `AtomicWaker`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36139,"byte_end":36167,"line_start":199,"line_end":199,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38482,"byte_end":38490,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicWaker>::register","value":"pub fn register(&Self, &Waker)","parent":null,"children":[],"decl_id":null,"docs":" Registers the waker to be notified on calls to `wake`.","sig":null,"attributes":[{"value":"/ Registers the waker to be notified on calls to `wake`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36444,"byte_end":36502,"line_start":211,"line_end":211,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36507,"byte_end":36510,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The new task will take place of any previous tasks that were registered","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36515,"byte_end":36590,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/ by previous calls to `register`. Any calls to `wake` that happen after","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36595,"byte_end":36669,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ a call to `register` (as defined by the memory ordering rules), will","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36674,"byte_end":36746,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ notify the `register` caller's task and deregister the waker from future","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36751,"byte_end":36827,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ notifications. Because of this, callers should ensure `register` gets","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36832,"byte_end":36905,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ invoked with a new `Waker` **each** time they require a wakeup.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36910,"byte_end":36977,"line_start":218,"line_end":218,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36982,"byte_end":36985,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ It is safe to call `register` with multiple other threads concurrently","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36990,"byte_end":37064,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ calling `wake`. This will result in the `register` caller's current","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37069,"byte_end":37140,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ task being notified once.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37145,"byte_end":37174,"line_start":222,"line_end":222,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37179,"byte_end":37182,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This function is safe to call concurrently, but this is generally a bad","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37187,"byte_end":37262,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ idea. Concurrent calls to `register` will attempt to register different","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37267,"byte_end":37342,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ tasks to be notified. One of the callers will win and have its task set,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37347,"byte_end":37423,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ but there is no guarantee as to which caller will succeed.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37428,"byte_end":37490,"line_start":227,"line_end":227,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37495,"byte_end":37498,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37503,"byte_end":37517,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37522,"byte_end":37525,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Here is how `register` is used when implementing a flag.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37530,"byte_end":37590,"line_start":231,"line_end":231,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37595,"byte_end":37598,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37603,"byte_end":37610,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use futures::future::Future;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37615,"byte_end":37647,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37652,"byte_end":37704,"line_start":235,"line_end":235,"column_start":5,"column_end":57}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37709,"byte_end":37747,"line_start":236,"line_end":236,"column_start":5,"column_end":43}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37752,"byte_end":37797,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37802,"byte_end":37824,"line_start":238,"line_end":238,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37829,"byte_end":37832,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ struct Flag {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37837,"byte_end":37854,"line_start":240,"line_end":240,"column_start":5,"column_end":22}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37859,"byte_end":37886,"line_start":241,"line_end":241,"column_start":5,"column_end":32}},{"value":"/     set: AtomicBool,","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37891,"byte_end":37915,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37920,"byte_end":37925,"line_start":243,"line_end":243,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37930,"byte_end":37933,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ impl Future for Flag {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37938,"byte_end":37964,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/     type Output = ();","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37969,"byte_end":37994,"line_start":246,"line_end":246,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":37999,"byte_end":38002,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38007,"byte_end":38080,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/         // Register **before** checking `set` to avoid a race condition","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38085,"byte_end":38160,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/         // that would result in lost notifications.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38165,"byte_end":38220,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/         self.waker.register(cx.waker());","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38225,"byte_end":38269,"line_start":251,"line_end":251,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38274,"byte_end":38277,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/         if self.set.load(Relaxed) {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38282,"byte_end":38321,"line_start":253,"line_end":253,"column_start":5,"column_end":44}},{"value":"/             Poll::Ready(())","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38326,"byte_end":38357,"line_start":254,"line_end":254,"column_start":5,"column_end":36}},{"value":"/         } else {","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38362,"byte_end":38382,"line_start":255,"line_end":255,"column_start":5,"column_end":25}},{"value":"/             Poll::Pending","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38387,"byte_end":38416,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38421,"byte_end":38434,"line_start":257,"line_end":257,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38439,"byte_end":38448,"line_start":258,"line_end":258,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38453,"byte_end":38458,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":38463,"byte_end":38470,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42619,"byte_end":42623,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"wake","qualname":"<AtomicWaker>::wake","value":"pub fn wake(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Calls `wake` on the last `Waker` passed to `register`.","sig":null,"attributes":[{"value":"/ Calls `wake` on the last `Waker` passed to `register`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42470,"byte_end":42528,"line_start":343,"line_end":343,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42533,"byte_end":42536,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If `register` has not been called yet, then this does nothing.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42541,"byte_end":42607,"line_start":345,"line_end":345,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":43119,"byte_end":43123,"line_start":360,"line_end":360,"column_start":12,"column_end":16},"name":"take","qualname":"<AtomicWaker>::take","value":"pub fn take(&Self) -> Option<Waker>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last `Waker` passed to `register`, so that the user can wake it.","sig":null,"attributes":[{"value":"/ Returns the last `Waker` passed to `register`, so that the user can wake it.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42723,"byte_end":42803,"line_start":352,"line_end":352,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42808,"byte_end":42811,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42816,"byte_end":42819,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Sometimes, just waking the AtomicWaker is not fine grained enough. This allows the user","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42824,"byte_end":42915,"line_start":355,"line_end":355,"column_start":5,"column_end":96}},{"value":"/ to take the waker and then wake it separately, rather than performing both steps in one","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":42920,"byte_end":43011,"line_start":356,"line_end":356,"column_start":5,"column_end":96}},{"value":"/ atomic action.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":43016,"byte_end":43034,"line_start":357,"line_end":357,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":43039,"byte_end":43042,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If a waker has not been registered, this returns `None`.","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":43047,"byte_end":43107,"line_start":359,"line_end":359,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":378},"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1190,"byte_end":1203,"line_start":33,"line_end":33,"column_start":9,"column_end":22},"name":"core_reexport","qualname":"::core_reexport","value":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","parent":null,"children":[{"krate":0,"index":379}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5036,"byte_end":5050,"line_start":22,"line_end":22,"column_start":19,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5510,"byte_end":5524,"line_start":39,"line_end":39,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6281,"byte_end":6295,"line_start":60,"line_end":60,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6479,"byte_end":6493,"line_start":67,"line_end":67,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6617,"byte_end":6631,"line_start":74,"line_end":74,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6862,"byte_end":6876,"line_start":85,"line_end":85,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7520,"byte_end":7529,"line_start":105,"line_end":105,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7564,"byte_end":7573,"line_start":106,"line_end":106,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7597,"byte_end":7606,"line_start":108,"line_end":108,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7853,"byte_end":7862,"line_start":116,"line_end":116,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8021,"byte_end":8030,"line_start":123,"line_end":123,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":10532,"byte_end":10535,"line_start":199,"line_end":199,"column_start":50,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":10843,"byte_end":10846,"line_start":210,"line_end":210,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11239,"byte_end":11242,"line_start":224,"line_end":224,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11586,"byte_end":11589,"line_start":236,"line_end":236,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11904,"byte_end":11907,"line_start":246,"line_end":246,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":12228,"byte_end":12231,"line_start":256,"line_end":256,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":12682,"byte_end":12685,"line_start":271,"line_end":271,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13113,"byte_end":13116,"line_start":283,"line_end":283,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13563,"byte_end":13572,"line_start":295,"line_end":295,"column_start":67,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13739,"byte_end":13748,"line_start":301,"line_end":301,"column_start":65,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13956,"byte_end":13965,"line_start":307,"line_end":307,"column_start":72,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14142,"byte_end":14151,"line_start":313,"line_end":313,"column_start":70,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14352,"byte_end":14366,"line_start":319,"line_end":319,"column_start":60,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14531,"byte_end":14545,"line_start":325,"line_end":325,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14744,"byte_end":14758,"line_start":331,"line_end":331,"column_start":65,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14933,"byte_end":14947,"line_start":337,"line_end":337,"column_start":63,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2669,"byte_end":2672,"line_start":40,"line_end":40,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2946,"byte_end":2947,"line_start":55,"line_end":55,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3723,"byte_end":3724,"line_start":78,"line_end":78,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":4088,"byte_end":4091,"line_start":95,"line_end":95,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":4292,"byte_end":4308,"line_start":102,"line_end":102,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19301,"byte_end":19304,"line_start":110,"line_end":110,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20456,"byte_end":20459,"line_start":148,"line_end":148,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20733,"byte_end":20734,"line_start":163,"line_end":163,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21506,"byte_end":21507,"line_start":184,"line_end":184,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21895,"byte_end":21898,"line_start":202,"line_end":202,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":22283,"byte_end":22291,"line_start":217,"line_end":217,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":22716,"byte_end":22732,"line_start":234,"line_end":234,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":23142,"byte_end":23145,"line_start":249,"line_end":249,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25942,"byte_end":25952,"line_start":61,"line_end":61,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26139,"byte_end":26149,"line_start":69,"line_end":69,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26317,"byte_end":26327,"line_start":76,"line_end":76,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26337,"byte_end":26347,"line_start":78,"line_end":78,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":27305,"byte_end":27308,"line_start":117,"line_end":117,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":27614,"byte_end":27617,"line_start":128,"line_end":128,"column_start":50,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36121,"byte_end":36132,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36303,"byte_end":36308,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44273,"byte_end":44284,"line_start":392,"line_end":392,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44370,"byte_end":44381,"line_start":398,"line_end":398,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44510,"byte_end":44521,"line_start":404,"line_end":404,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44546,"byte_end":44557,"line_start":405,"line_end":405,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":930,"byte_end":936,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1018,"byte_end":1024,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":216}},{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/lib.rs","byte_start":1119,"byte_end":1123,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":294}},{"kind":"Mod","span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/mod.rs","byte_start":23404,"byte_end":23414,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":341}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5036,"byte_end":5050,"line_start":22,"line_end":22,"column_start":19,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":5510,"byte_end":5524,"line_start":39,"line_end":39,"column_start":13,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6281,"byte_end":6295,"line_start":60,"line_end":60,"column_start":24,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6479,"byte_end":6493,"line_start":67,"line_end":67,"column_start":40,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6617,"byte_end":6631,"line_start":74,"line_end":74,"column_start":20,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":8319}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":6862,"byte_end":6876,"line_start":85,"line_end":85,"column_start":18,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":2117}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7520,"byte_end":7529,"line_start":105,"line_end":105,"column_start":19,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7564,"byte_end":7573,"line_start":106,"line_end":106,"column_start":25,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7597,"byte_end":7606,"line_start":108,"line_end":108,"column_start":13,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":7853,"byte_end":7862,"line_start":116,"line_end":116,"column_start":24,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":8021,"byte_end":8030,"line_start":123,"line_end":123,"column_start":20,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":8319}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":10532,"byte_end":10535,"line_start":199,"line_end":199,"column_start":50,"column_end":53},"kind":{"Impl":{"id":11}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":10843,"byte_end":10846,"line_start":210,"line_end":210,"column_start":47,"column_end":50},"kind":{"Impl":{"id":12}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11239,"byte_end":11242,"line_start":224,"line_end":224,"column_start":54,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11586,"byte_end":11589,"line_start":236,"line_end":236,"column_start":55,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":11904,"byte_end":11907,"line_start":246,"line_end":246,"column_start":55,"column_end":58},"kind":{"Impl":{"id":15}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":12228,"byte_end":12231,"line_start":256,"line_end":256,"column_start":54,"column_end":57},"kind":{"Impl":{"id":16}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":12682,"byte_end":12685,"line_start":271,"line_end":271,"column_start":55,"column_end":58},"kind":{"Impl":{"id":17}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13113,"byte_end":13116,"line_start":283,"line_end":283,"column_start":55,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":77}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13563,"byte_end":13572,"line_start":295,"line_end":295,"column_start":67,"column_end":76},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13739,"byte_end":13748,"line_start":301,"line_end":301,"column_start":65,"column_end":74},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":13956,"byte_end":13965,"line_start":307,"line_end":307,"column_start":72,"column_end":81},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14142,"byte_end":14151,"line_start":313,"line_end":313,"column_start":70,"column_end":79},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":55},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14352,"byte_end":14366,"line_start":319,"line_end":319,"column_start":60,"column_end":74},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14531,"byte_end":14545,"line_start":325,"line_end":325,"column_start":58,"column_end":72},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14744,"byte_end":14758,"line_start":331,"line_end":331,"column_start":65,"column_end":79},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/future_obj.rs","byte_start":14933,"byte_end":14947,"line_start":337,"line_end":337,"column_start":63,"column_end":77},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":21},"to":{"krate":2,"index":1840}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2359,"byte_end":2365,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":8319},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2669,"byte_end":2672,"line_start":40,"line_end":40,"column_start":25,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":2946,"byte_end":2947,"line_start":55,"line_end":55,"column_start":30,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":189},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3147,"byte_end":3153,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":8319},"to":{"krate":0,"index":192}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3176,"byte_end":3182,"line_start":60,"line_end":60,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":187},"to":{"krate":0,"index":192}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":3723,"byte_end":3724,"line_start":78,"line_end":78,"column_start":29,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":197},"to":{"krate":0,"index":192}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":4088,"byte_end":4091,"line_start":95,"line_end":95,"column_start":59,"column_end":62},"kind":{"Impl":{"id":30}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/future/mod.rs","byte_start":4292,"byte_end":4308,"line_start":102,"line_end":102,"column_start":54,"column_end":70},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":3762},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":19301,"byte_end":19304,"line_start":110,"line_end":110,"column_start":20,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20157,"byte_end":20163,"line_start":137,"line_end":137,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":228},"to":{"krate":0,"index":242}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20456,"byte_end":20459,"line_start":148,"line_end":148,"column_start":25,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":2,"index":30074},"to":{"krate":0,"index":242}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20733,"byte_end":20734,"line_start":163,"line_end":163,"column_start":30,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":254},"to":{"krate":0,"index":252}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20932,"byte_end":20938,"line_start":168,"line_end":168,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":228},"to":{"krate":0,"index":257}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":20961,"byte_end":20967,"line_start":168,"line_end":168,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":252},"to":{"krate":0,"index":257}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21506,"byte_end":21507,"line_start":184,"line_end":184,"column_start":29,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":262},"to":{"krate":0,"index":257}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":21895,"byte_end":21898,"line_start":202,"line_end":202,"column_start":49,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":22283,"byte_end":22291,"line_start":217,"line_end":217,"column_start":51,"column_end":59},"kind":{"Impl":{"id":37}},"from":{"krate":5,"index":2538},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":22716,"byte_end":22732,"line_start":234,"line_end":234,"column_start":44,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":3762},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/stream.rs","byte_start":23142,"byte_end":23145,"line_start":249,"line_end":249,"column_start":59,"column_end":62},"kind":{"Impl":{"id":39}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":242}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":25942,"byte_end":25952,"line_start":61,"line_end":61,"column_start":21,"column_end":31},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26139,"byte_end":26149,"line_start":69,"line_end":69,"column_start":23,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26317,"byte_end":26327,"line_start":76,"line_end":76,"column_start":28,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":308},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":26337,"byte_end":26347,"line_start":78,"line_end":78,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":27305,"byte_end":27308,"line_start":117,"line_end":117,"column_start":40,"column_end":43},"kind":{"Impl":{"id":44}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":302}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/spawn.rs","byte_start":27614,"byte_end":27617,"line_start":128,"line_end":128,"column_start":50,"column_end":53},"kind":{"Impl":{"id":45}},"from":{"krate":5,"index":82},"to":{"krate":0,"index":305}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36121,"byte_end":36132,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36267,"byte_end":36271,"line_start":202,"line_end":202,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1934},"to":{"krate":0,"index":359}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":36303,"byte_end":36308,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":8469},"to":{"krate":0,"index":359}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44273,"byte_end":44284,"line_start":392,"line_end":392,"column_start":18,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":1910}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44370,"byte_end":44381,"line_start":398,"line_end":398,"column_start":21,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":6198}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44510,"byte_end":44521,"line_start":404,"line_end":404,"column_start":22,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":1922}},{"span":{"file_name":"/home/alansky/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-preview-0.3.0-alpha.19/src/task/__internal/atomic_waker.rs","byte_start":44546,"byte_end":44557,"line_start":405,"line_end":405,"column_start":22,"column_end":33},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":1934}}]}